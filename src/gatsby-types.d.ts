/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {
	type Maybe<T> = T | null;
	type InputMaybe<T> = T | null;
	type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
	type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
	type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
	/** All built-in and custom scalars, mapped to their actual values */
	type Scalars = {
		/** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
		ID: string;
		/** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
		String: string;
		/** The `Boolean` scalar type represents `true` or `false`. */
		Boolean: boolean;
		/** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
		Int: number;
		/** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
		Float: number;
		/** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
		Date: string;
		GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
		/** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
		JSON: Record<string, unknown>;
	};

	type AVIFOptions = {
		readonly lossless: InputMaybe<Scalars['Boolean']>;
		readonly quality: InputMaybe<Scalars['Int']>;
		readonly speed: InputMaybe<Scalars['Int']>;
	};

	type BlurredOptions = {
		/** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
		readonly toFormat: InputMaybe<ImageFormat>;
		/** Width of the generated low-res preview. Default is 20px */
		readonly width: InputMaybe<Scalars['Int']>;
	};

	type BooleanQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['Boolean']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
		readonly ne: InputMaybe<Scalars['Boolean']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
	};

	type ContentfulAllBlogs = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly all_blog_section: Maybe<Scalars['String']>;
			readonly all_blogs_banner_section: Maybe<ContentfulBannerSection>;
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly others_all_blogs_section: Maybe<ReadonlyArray<Maybe<ContentfulCardSection>>>;
			readonly parent: Maybe<Node>;
			readonly single_blogs: Maybe<ReadonlyArray<Maybe<ContentfulCard>>>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulAllBlogsSys>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulAllBlogs_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulAllBlogs_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulAllBlogsConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulAllBlogsEdge>;
		readonly group: ReadonlyArray<ContentfulAllBlogsGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulAllBlogs>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulAllBlogsConnection_distinctArgs = {
		field: ContentfulAllBlogsFieldSelector;
	};

	type ContentfulAllBlogsConnection_groupArgs = {
		field: ContentfulAllBlogsFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulAllBlogsConnection_maxArgs = {
		field: ContentfulAllBlogsFieldSelector;
	};

	type ContentfulAllBlogsConnection_minArgs = {
		field: ContentfulAllBlogsFieldSelector;
	};

	type ContentfulAllBlogsConnection_sumArgs = {
		field: ContentfulAllBlogsFieldSelector;
	};

	type ContentfulAllBlogsEdge = {
		readonly next: Maybe<ContentfulAllBlogs>;
		readonly node: ContentfulAllBlogs;
		readonly previous: Maybe<ContentfulAllBlogs>;
	};

	type ContentfulAllBlogsFieldSelector = {
		readonly all_blog_section: InputMaybe<FieldSelectorEnum>;
		readonly all_blogs_banner_section: InputMaybe<ContentfulBannerSectionFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly others_all_blogs_section: InputMaybe<ContentfulCardSectionFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly single_blogs: InputMaybe<ContentfulCardFieldSelector>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulAllBlogsSysFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulAllBlogsFilterInput = {
		readonly all_blog_section: InputMaybe<StringQueryOperatorInput>;
		readonly all_blogs_banner_section: InputMaybe<ContentfulBannerSectionFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly others_all_blogs_section: InputMaybe<ContentfulCardSectionFilterListInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly single_blogs: InputMaybe<ContentfulCardFilterListInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulAllBlogsSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulAllBlogsFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulAllBlogsFilterInput>;
	};

	type ContentfulAllBlogsGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulAllBlogsEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulAllBlogsGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulAllBlogs>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulAllBlogsGroupConnection_distinctArgs = {
		field: ContentfulAllBlogsFieldSelector;
	};

	type ContentfulAllBlogsGroupConnection_groupArgs = {
		field: ContentfulAllBlogsFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulAllBlogsGroupConnection_maxArgs = {
		field: ContentfulAllBlogsFieldSelector;
	};

	type ContentfulAllBlogsGroupConnection_minArgs = {
		field: ContentfulAllBlogsFieldSelector;
	};

	type ContentfulAllBlogsGroupConnection_sumArgs = {
		field: ContentfulAllBlogsFieldSelector;
	};

	type ContentfulAllBlogsSortInput = {
		readonly all_blog_section: InputMaybe<SortOrderEnum>;
		readonly all_blogs_banner_section: InputMaybe<ContentfulBannerSectionSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly others_all_blogs_section: InputMaybe<ContentfulCardSectionSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly single_blogs: InputMaybe<ContentfulCardSortInput>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulAllBlogsSysSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulAllBlogsSys = {
		readonly contentType: Maybe<ContentfulAllBlogsSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulAllBlogsSysContentType = {
		readonly sys: Maybe<ContentfulAllBlogsSysContentTypeSys>;
	};

	type ContentfulAllBlogsSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulAllBlogsSysContentTypeSysFieldSelector>;
	};

	type ContentfulAllBlogsSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulAllBlogsSysContentTypeSysFilterInput>;
	};

	type ContentfulAllBlogsSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulAllBlogsSysContentTypeSysSortInput>;
	};

	type ContentfulAllBlogsSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulAllBlogsSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulAllBlogsSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulAllBlogsSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulAllBlogsSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulAllBlogsSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulAllBlogsSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulAllBlogsSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulAllBlogsSysSortInput = {
		readonly contentType: InputMaybe<ContentfulAllBlogsSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulAsset = ContentfulReference &
		Node &
		RemoteFile & {
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<Scalars['String']>;
			readonly file: Maybe<ContentfulAssetFile>;
			readonly filename: Scalars['String'];
			readonly filesize: Maybe<Scalars['Int']>;
			/** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
			readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
			readonly gatsbyImageData: Maybe<Scalars['GatsbyImageData']>;
			readonly height: Maybe<Scalars['Int']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly mimeType: Scalars['String'];
			readonly node_locale: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			readonly placeholderUrl: Maybe<Scalars['String']>;
			readonly publicUrl: Scalars['String'];
			readonly resize: Maybe<RemoteFileResize>;
			readonly size: Maybe<Scalars['Int']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulAssetSys>;
			readonly title: Maybe<Scalars['String']>;
			readonly updatedAt: Maybe<Scalars['Date']>;
			readonly url: Maybe<Scalars['String']>;
			readonly width: Maybe<Scalars['Int']>;
		};

	type ContentfulAsset_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulAsset_gatsbyImageArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		backgroundColor: InputMaybe<Scalars['String']>;
		breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
		height: InputMaybe<Scalars['Int']>;
		layout?: InputMaybe<RemoteFileLayout>;
		outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
		placeholder?: InputMaybe<RemoteFilePlaceholder>;
		quality?: InputMaybe<Scalars['Int']>;
		sizes: InputMaybe<Scalars['String']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ContentfulAsset_gatsbyImageDataArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		backgroundColor: InputMaybe<Scalars['String']>;
		breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		cornerRadius?: InputMaybe<Scalars['Int']>;
		cropFocus: InputMaybe<ContentfulImageCropFocus>;
		formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
		height: InputMaybe<Scalars['Int']>;
		jpegProgressive?: InputMaybe<Scalars['Boolean']>;
		layout: InputMaybe<GatsbyImageLayout>;
		outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
		placeholder: InputMaybe<GatsbyImagePlaceholder>;
		quality: InputMaybe<Scalars['Int']>;
		resizingBehavior: InputMaybe<ImageResizingBehavior>;
		sizes: InputMaybe<Scalars['String']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ContentfulAsset_resizeArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		format?: InputMaybe<RemoteFileFormat>;
		height: InputMaybe<Scalars['Int']>;
		quality?: InputMaybe<Scalars['Int']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ContentfulAsset_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulAssetConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulAssetEdge>;
		readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulAsset>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulAssetConnection_distinctArgs = {
		field: ContentfulAssetFieldSelector;
	};

	type ContentfulAssetConnection_groupArgs = {
		field: ContentfulAssetFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulAssetConnection_maxArgs = {
		field: ContentfulAssetFieldSelector;
	};

	type ContentfulAssetConnection_minArgs = {
		field: ContentfulAssetFieldSelector;
	};

	type ContentfulAssetConnection_sumArgs = {
		field: ContentfulAssetFieldSelector;
	};

	type ContentfulAssetEdge = {
		readonly next: Maybe<ContentfulAsset>;
		readonly node: ContentfulAsset;
		readonly previous: Maybe<ContentfulAsset>;
	};

	type ContentfulAssetFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly file: InputMaybe<ContentfulAssetFileFieldSelector>;
		readonly filename: InputMaybe<FieldSelectorEnum>;
		readonly filesize: InputMaybe<FieldSelectorEnum>;
		readonly gatsbyImage: InputMaybe<FieldSelectorEnum>;
		readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
		readonly height: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly mimeType: InputMaybe<FieldSelectorEnum>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly placeholderUrl: InputMaybe<FieldSelectorEnum>;
		readonly publicUrl: InputMaybe<FieldSelectorEnum>;
		readonly resize: InputMaybe<RemoteFileResizeFieldSelector>;
		readonly size: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulAssetSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
		readonly url: InputMaybe<FieldSelectorEnum>;
		readonly width: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulAssetFile = {
		readonly contentType: Maybe<Scalars['String']>;
		readonly details: Maybe<ContentfulAssetFileDetails>;
		readonly fileName: Maybe<Scalars['String']>;
		readonly url: Maybe<Scalars['String']>;
	};

	type ContentfulAssetFileDetails = {
		readonly image: Maybe<ContentfulAssetFileDetailsImage>;
		readonly size: Maybe<Scalars['Int']>;
	};

	type ContentfulAssetFileDetailsFieldSelector = {
		readonly image: InputMaybe<ContentfulAssetFileDetailsImageFieldSelector>;
		readonly size: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulAssetFileDetailsFilterInput = {
		readonly image: InputMaybe<ContentfulAssetFileDetailsImageFilterInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
	};

	type ContentfulAssetFileDetailsImage = {
		readonly height: Maybe<Scalars['Int']>;
		readonly width: Maybe<Scalars['Int']>;
	};

	type ContentfulAssetFileDetailsImageFieldSelector = {
		readonly height: InputMaybe<FieldSelectorEnum>;
		readonly width: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulAssetFileDetailsImageFilterInput = {
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	type ContentfulAssetFileDetailsImageSortInput = {
		readonly height: InputMaybe<SortOrderEnum>;
		readonly width: InputMaybe<SortOrderEnum>;
	};

	type ContentfulAssetFileDetailsSortInput = {
		readonly image: InputMaybe<ContentfulAssetFileDetailsImageSortInput>;
		readonly size: InputMaybe<SortOrderEnum>;
	};

	type ContentfulAssetFileFieldSelector = {
		readonly contentType: InputMaybe<FieldSelectorEnum>;
		readonly details: InputMaybe<ContentfulAssetFileDetailsFieldSelector>;
		readonly fileName: InputMaybe<FieldSelectorEnum>;
		readonly url: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulAssetFileFilterInput = {
		readonly contentType: InputMaybe<StringQueryOperatorInput>;
		readonly details: InputMaybe<ContentfulAssetFileDetailsFilterInput>;
		readonly fileName: InputMaybe<StringQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulAssetFileSortInput = {
		readonly contentType: InputMaybe<SortOrderEnum>;
		readonly details: InputMaybe<ContentfulAssetFileDetailsSortInput>;
		readonly fileName: InputMaybe<SortOrderEnum>;
		readonly url: InputMaybe<SortOrderEnum>;
	};

	type ContentfulAssetFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly file: InputMaybe<ContentfulAssetFileFilterInput>;
		readonly filename: InputMaybe<StringQueryOperatorInput>;
		readonly filesize: InputMaybe<IntQueryOperatorInput>;
		readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly mimeType: InputMaybe<StringQueryOperatorInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly placeholderUrl: InputMaybe<StringQueryOperatorInput>;
		readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
		readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulAssetSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
		readonly url: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	type ContentfulAssetGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulAssetEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulAsset>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulAssetGroupConnection_distinctArgs = {
		field: ContentfulAssetFieldSelector;
	};

	type ContentfulAssetGroupConnection_groupArgs = {
		field: ContentfulAssetFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulAssetGroupConnection_maxArgs = {
		field: ContentfulAssetFieldSelector;
	};

	type ContentfulAssetGroupConnection_minArgs = {
		field: ContentfulAssetFieldSelector;
	};

	type ContentfulAssetGroupConnection_sumArgs = {
		field: ContentfulAssetFieldSelector;
	};

	type ContentfulAssetSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly file: InputMaybe<ContentfulAssetFileSortInput>;
		readonly filename: InputMaybe<SortOrderEnum>;
		readonly filesize: InputMaybe<SortOrderEnum>;
		readonly gatsbyImage: InputMaybe<SortOrderEnum>;
		readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
		readonly height: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly mimeType: InputMaybe<SortOrderEnum>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly placeholderUrl: InputMaybe<SortOrderEnum>;
		readonly publicUrl: InputMaybe<SortOrderEnum>;
		readonly resize: InputMaybe<RemoteFileResizeSortInput>;
		readonly size: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulAssetSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
		readonly url: InputMaybe<SortOrderEnum>;
		readonly width: InputMaybe<SortOrderEnum>;
	};

	type ContentfulAssetSys = {
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulAssetSysFieldSelector = {
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulAssetSysFilterInput = {
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulAssetSysSortInput = {
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBannerSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly all_blogs: Maybe<ReadonlyArray<Maybe<ContentfulAllBlogs>>>;
			readonly background_image: Maybe<ContentfulAsset>;
			readonly banner_page_name: Maybe<Scalars['String']>;
			readonly blog_date: Maybe<Scalars['Date']>;
			readonly blog_details_page: Maybe<ReadonlyArray<Maybe<ContentfulBlogDetailsPage>>>;
			readonly button_link: Maybe<Scalars['String']>;
			readonly button_text: Maybe<Scalars['String']>;
			/** Returns the first child node of type contentfulBannerSectionDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulBannerSectionDescriptionTextNode: Maybe<contentfulBannerSectionDescriptionTextNode>;
			/** Returns the first child node of type contentfulBannerSectionRichTitleTextNode or null if there are no children of given type on this node */
			readonly childContentfulBannerSectionRichTitleTextNode: Maybe<contentfulBannerSectionRichTitleTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulBannerSectionDescriptionTextNode */
			readonly childrenContentfulBannerSectionDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulBannerSectionDescriptionTextNode>>
			>;
			/** Returns all children nodes filtered by type contentfulBannerSectionRichTitleTextNode */
			readonly childrenContentfulBannerSectionRichTitleTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulBannerSectionRichTitleTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<contentfulBannerSectionDescriptionTextNode>;
			readonly feature_colour: Maybe<Scalars['String']>;
			readonly feature_details_page: Maybe<ReadonlyArray<Maybe<ContentfulFeatureDetailsPage>>>;
			readonly id: Scalars['ID'];
			readonly image: Maybe<ContentfulAsset>;
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
			readonly parent: Maybe<Node>;
			readonly rich_title: Maybe<contentfulBannerSectionRichTitleTextNode>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulBannerSectionSys>;
			readonly title: Maybe<ContentfulBannerSectionTitle>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulBannerSection_blog_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBannerSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBannerSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBannerSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulBannerSectionEdge>;
		readonly group: ReadonlyArray<ContentfulBannerSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulBannerSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulBannerSectionConnection_distinctArgs = {
		field: ContentfulBannerSectionFieldSelector;
	};

	type ContentfulBannerSectionConnection_groupArgs = {
		field: ContentfulBannerSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulBannerSectionConnection_maxArgs = {
		field: ContentfulBannerSectionFieldSelector;
	};

	type ContentfulBannerSectionConnection_minArgs = {
		field: ContentfulBannerSectionFieldSelector;
	};

	type ContentfulBannerSectionConnection_sumArgs = {
		field: ContentfulBannerSectionFieldSelector;
	};

	type ContentfulBannerSectionContentfulBasicInfoSectionContentfulCardSectionContentfulDividedSectionContentfulFooterDetailsPageSectionContentfulPlanFeatureSectionContentfulPlansSectionUnion =

			| ContentfulBannerSection
			| ContentfulBasicInfoSection
			| ContentfulCardSection
			| ContentfulDividedSection
			| ContentfulFooterDetailsPageSection
			| ContentfulPlanFeatureSection
			| ContentfulPlansSection;

	type ContentfulBannerSectionContentfulBlogDetailsSectionContentfulCardSectionUnion =
		| ContentfulBannerSection
		| ContentfulBlogDetailsSection
		| ContentfulCardSection;

	type ContentfulBannerSectionContentfulCardSectionContentfulFeaturesDetailsSectionUnion =
		| ContentfulBannerSection
		| ContentfulCardSection
		| ContentfulFeaturesDetailsSection;

	type ContentfulBannerSectionEdge = {
		readonly next: Maybe<ContentfulBannerSection>;
		readonly node: ContentfulBannerSection;
		readonly previous: Maybe<ContentfulBannerSection>;
	};

	type ContentfulBannerSectionFieldSelector = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsFieldSelector>;
		readonly background_image: InputMaybe<ContentfulAssetFieldSelector>;
		readonly banner_page_name: InputMaybe<FieldSelectorEnum>;
		readonly blog_date: InputMaybe<FieldSelectorEnum>;
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageFieldSelector>;
		readonly button_link: InputMaybe<FieldSelectorEnum>;
		readonly button_text: InputMaybe<FieldSelectorEnum>;
		readonly childContentfulBannerSectionDescriptionTextNode: InputMaybe<contentfulBannerSectionDescriptionTextNodeFieldSelector>;
		readonly childContentfulBannerSectionRichTitleTextNode: InputMaybe<contentfulBannerSectionRichTitleTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulBannerSectionDescriptionTextNode: InputMaybe<contentfulBannerSectionDescriptionTextNodeFieldSelector>;
		readonly childrenContentfulBannerSectionRichTitleTextNode: InputMaybe<contentfulBannerSectionRichTitleTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<contentfulBannerSectionDescriptionTextNodeFieldSelector>;
		readonly feature_colour: InputMaybe<FieldSelectorEnum>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly image: InputMaybe<ContentfulAssetFieldSelector>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page: InputMaybe<ContentfulPageFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly rich_title: InputMaybe<contentfulBannerSectionRichTitleTextNodeFieldSelector>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulBannerSectionSysFieldSelector>;
		readonly title: InputMaybe<ContentfulBannerSectionTitleFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBannerSectionFilterInput = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsFilterListInput>;
		readonly background_image: InputMaybe<ContentfulAssetFilterInput>;
		readonly banner_page_name: InputMaybe<StringQueryOperatorInput>;
		readonly blog_date: InputMaybe<DateQueryOperatorInput>;
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageFilterListInput>;
		readonly button_link: InputMaybe<StringQueryOperatorInput>;
		readonly button_text: InputMaybe<StringQueryOperatorInput>;
		readonly childContentfulBannerSectionDescriptionTextNode: InputMaybe<contentfulBannerSectionDescriptionTextNodeFilterInput>;
		readonly childContentfulBannerSectionRichTitleTextNode: InputMaybe<contentfulBannerSectionRichTitleTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulBannerSectionDescriptionTextNode: InputMaybe<contentfulBannerSectionDescriptionTextNodeFilterListInput>;
		readonly childrenContentfulBannerSectionRichTitleTextNode: InputMaybe<contentfulBannerSectionRichTitleTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<contentfulBannerSectionDescriptionTextNodeFilterInput>;
		readonly feature_colour: InputMaybe<StringQueryOperatorInput>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly image: InputMaybe<ContentfulAssetFilterInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page: InputMaybe<ContentfulPageFilterListInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly rich_title: InputMaybe<contentfulBannerSectionRichTitleTextNodeFilterInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulBannerSectionSysFilterInput>;
		readonly title: InputMaybe<ContentfulBannerSectionTitleFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulBannerSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulBannerSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulBannerSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulBannerSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulBannerSectionGroupConnection_distinctArgs = {
		field: ContentfulBannerSectionFieldSelector;
	};

	type ContentfulBannerSectionGroupConnection_groupArgs = {
		field: ContentfulBannerSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulBannerSectionGroupConnection_maxArgs = {
		field: ContentfulBannerSectionFieldSelector;
	};

	type ContentfulBannerSectionGroupConnection_minArgs = {
		field: ContentfulBannerSectionFieldSelector;
	};

	type ContentfulBannerSectionGroupConnection_sumArgs = {
		field: ContentfulBannerSectionFieldSelector;
	};

	type ContentfulBannerSectionSortInput = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsSortInput>;
		readonly background_image: InputMaybe<ContentfulAssetSortInput>;
		readonly banner_page_name: InputMaybe<SortOrderEnum>;
		readonly blog_date: InputMaybe<SortOrderEnum>;
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageSortInput>;
		readonly button_link: InputMaybe<SortOrderEnum>;
		readonly button_text: InputMaybe<SortOrderEnum>;
		readonly childContentfulBannerSectionDescriptionTextNode: InputMaybe<contentfulBannerSectionDescriptionTextNodeSortInput>;
		readonly childContentfulBannerSectionRichTitleTextNode: InputMaybe<contentfulBannerSectionRichTitleTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulBannerSectionDescriptionTextNode: InputMaybe<contentfulBannerSectionDescriptionTextNodeSortInput>;
		readonly childrenContentfulBannerSectionRichTitleTextNode: InputMaybe<contentfulBannerSectionRichTitleTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<contentfulBannerSectionDescriptionTextNodeSortInput>;
		readonly feature_colour: InputMaybe<SortOrderEnum>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly image: InputMaybe<ContentfulAssetSortInput>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page: InputMaybe<ContentfulPageSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly rich_title: InputMaybe<contentfulBannerSectionRichTitleTextNodeSortInput>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulBannerSectionSysSortInput>;
		readonly title: InputMaybe<ContentfulBannerSectionTitleSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBannerSectionSys = {
		readonly contentType: Maybe<ContentfulBannerSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulBannerSectionSysContentType = {
		readonly sys: Maybe<ContentfulBannerSectionSysContentTypeSys>;
	};

	type ContentfulBannerSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulBannerSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulBannerSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulBannerSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulBannerSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulBannerSectionSysContentTypeSysSortInput>;
	};

	type ContentfulBannerSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulBannerSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBannerSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBannerSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBannerSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulBannerSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBannerSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulBannerSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBannerSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulBannerSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBannerSectionTitle = {
		readonly raw: Maybe<Scalars['String']>;
	};

	type ContentfulBannerSectionTitleFieldSelector = {
		readonly raw: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBannerSectionTitleFilterInput = {
		readonly raw: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBannerSectionTitleSortInput = {
		readonly raw: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBasicInfoSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly basic_info_section_name: Maybe<Scalars['String']>;
			readonly button_link: Maybe<Scalars['String']>;
			readonly button_text: Maybe<Scalars['String']>;
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
			readonly parent: Maybe<Node>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sub_title: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulBasicInfoSectionSys>;
			readonly title: Maybe<Scalars['String']>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulBasicInfoSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBasicInfoSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBasicInfoSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulBasicInfoSectionEdge>;
		readonly group: ReadonlyArray<ContentfulBasicInfoSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulBasicInfoSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulBasicInfoSectionConnection_distinctArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
	};

	type ContentfulBasicInfoSectionConnection_groupArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulBasicInfoSectionConnection_maxArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
	};

	type ContentfulBasicInfoSectionConnection_minArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
	};

	type ContentfulBasicInfoSectionConnection_sumArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
	};

	type ContentfulBasicInfoSectionEdge = {
		readonly next: Maybe<ContentfulBasicInfoSection>;
		readonly node: ContentfulBasicInfoSection;
		readonly previous: Maybe<ContentfulBasicInfoSection>;
	};

	type ContentfulBasicInfoSectionFieldSelector = {
		readonly basic_info_section_name: InputMaybe<FieldSelectorEnum>;
		readonly button_link: InputMaybe<FieldSelectorEnum>;
		readonly button_text: InputMaybe<FieldSelectorEnum>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page: InputMaybe<ContentfulPageFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sub_title: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulBasicInfoSectionSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBasicInfoSectionFilterInput = {
		readonly basic_info_section_name: InputMaybe<StringQueryOperatorInput>;
		readonly button_link: InputMaybe<StringQueryOperatorInput>;
		readonly button_text: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page: InputMaybe<ContentfulPageFilterListInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sub_title: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulBasicInfoSectionSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulBasicInfoSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulBasicInfoSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulBasicInfoSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulBasicInfoSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulBasicInfoSectionGroupConnection_distinctArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
	};

	type ContentfulBasicInfoSectionGroupConnection_groupArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulBasicInfoSectionGroupConnection_maxArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
	};

	type ContentfulBasicInfoSectionGroupConnection_minArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
	};

	type ContentfulBasicInfoSectionGroupConnection_sumArgs = {
		field: ContentfulBasicInfoSectionFieldSelector;
	};

	type ContentfulBasicInfoSectionSortInput = {
		readonly basic_info_section_name: InputMaybe<SortOrderEnum>;
		readonly button_link: InputMaybe<SortOrderEnum>;
		readonly button_text: InputMaybe<SortOrderEnum>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page: InputMaybe<ContentfulPageSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sub_title: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulBasicInfoSectionSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBasicInfoSectionSys = {
		readonly contentType: Maybe<ContentfulBasicInfoSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulBasicInfoSectionSysContentType = {
		readonly sys: Maybe<ContentfulBasicInfoSectionSysContentTypeSys>;
	};

	type ContentfulBasicInfoSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulBasicInfoSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulBasicInfoSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulBasicInfoSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulBasicInfoSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulBasicInfoSectionSysContentTypeSysSortInput>;
	};

	type ContentfulBasicInfoSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulBasicInfoSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBasicInfoSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBasicInfoSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBasicInfoSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulBasicInfoSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBasicInfoSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulBasicInfoSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBasicInfoSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulBasicInfoSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBlogDetailsPage = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly blog_details_page_sections: Maybe<
				ReadonlyArray<Maybe<ContentfulBannerSectionContentfulBlogDetailsSectionContentfulCardSectionUnion>>
			>;
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page_name: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			readonly seo_title: Maybe<Scalars['String']>;
			readonly slug: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulBlogDetailsPageSys>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulBlogDetailsPage_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBlogDetailsPage_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBlogDetailsPageConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulBlogDetailsPageEdge>;
		readonly group: ReadonlyArray<ContentfulBlogDetailsPageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulBlogDetailsPage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulBlogDetailsPageConnection_distinctArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
	};

	type ContentfulBlogDetailsPageConnection_groupArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulBlogDetailsPageConnection_maxArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
	};

	type ContentfulBlogDetailsPageConnection_minArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
	};

	type ContentfulBlogDetailsPageConnection_sumArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
	};

	type ContentfulBlogDetailsPageEdge = {
		readonly next: Maybe<ContentfulBlogDetailsPage>;
		readonly node: ContentfulBlogDetailsPage;
		readonly previous: Maybe<ContentfulBlogDetailsPage>;
	};

	type ContentfulBlogDetailsPageFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page_name: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly seo_title: InputMaybe<FieldSelectorEnum>;
		readonly slug: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulBlogDetailsPageSysFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBlogDetailsPageFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page_name: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly seo_title: InputMaybe<StringQueryOperatorInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulBlogDetailsPageSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulBlogDetailsPageFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulBlogDetailsPageFilterInput>;
	};

	type ContentfulBlogDetailsPageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulBlogDetailsPageEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulBlogDetailsPageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulBlogDetailsPage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulBlogDetailsPageGroupConnection_distinctArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
	};

	type ContentfulBlogDetailsPageGroupConnection_groupArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulBlogDetailsPageGroupConnection_maxArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
	};

	type ContentfulBlogDetailsPageGroupConnection_minArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
	};

	type ContentfulBlogDetailsPageGroupConnection_sumArgs = {
		field: ContentfulBlogDetailsPageFieldSelector;
	};

	type ContentfulBlogDetailsPageSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page_name: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly seo_title: InputMaybe<SortOrderEnum>;
		readonly slug: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulBlogDetailsPageSysSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBlogDetailsPageSys = {
		readonly contentType: Maybe<ContentfulBlogDetailsPageSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulBlogDetailsPageSysContentType = {
		readonly sys: Maybe<ContentfulBlogDetailsPageSysContentTypeSys>;
	};

	type ContentfulBlogDetailsPageSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulBlogDetailsPageSysContentTypeSysFieldSelector>;
	};

	type ContentfulBlogDetailsPageSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulBlogDetailsPageSysContentTypeSysFilterInput>;
	};

	type ContentfulBlogDetailsPageSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulBlogDetailsPageSysContentTypeSysSortInput>;
	};

	type ContentfulBlogDetailsPageSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulBlogDetailsPageSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBlogDetailsPageSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBlogDetailsPageSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBlogDetailsPageSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulBlogDetailsPageSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBlogDetailsPageSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulBlogDetailsPageSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBlogDetailsPageSysSortInput = {
		readonly contentType: InputMaybe<ContentfulBlogDetailsPageSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBlogDetailsSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly blog_details_page: Maybe<ReadonlyArray<Maybe<ContentfulBlogDetailsPage>>>;
			/** Returns the first child node of type contentfulBlogDetailsSectionDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulBlogDetailsSectionDescriptionTextNode: Maybe<contentfulBlogDetailsSectionDescriptionTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulBlogDetailsSectionDescriptionTextNode */
			readonly childrenContentfulBlogDetailsSectionDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulBlogDetailsSectionDescriptionTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<contentfulBlogDetailsSectionDescriptionTextNode>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly parent: Maybe<Node>;
			readonly section_name: Maybe<Scalars['String']>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulBlogDetailsSectionSys>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulBlogDetailsSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBlogDetailsSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulBlogDetailsSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulBlogDetailsSectionEdge>;
		readonly group: ReadonlyArray<ContentfulBlogDetailsSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulBlogDetailsSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulBlogDetailsSectionConnection_distinctArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
	};

	type ContentfulBlogDetailsSectionConnection_groupArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulBlogDetailsSectionConnection_maxArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
	};

	type ContentfulBlogDetailsSectionConnection_minArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
	};

	type ContentfulBlogDetailsSectionConnection_sumArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
	};

	type ContentfulBlogDetailsSectionEdge = {
		readonly next: Maybe<ContentfulBlogDetailsSection>;
		readonly node: ContentfulBlogDetailsSection;
		readonly previous: Maybe<ContentfulBlogDetailsSection>;
	};

	type ContentfulBlogDetailsSectionFieldSelector = {
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageFieldSelector>;
		readonly childContentfulBlogDetailsSectionDescriptionTextNode: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulBlogDetailsSectionDescriptionTextNode: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly section_name: InputMaybe<FieldSelectorEnum>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulBlogDetailsSectionSysFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBlogDetailsSectionFilterInput = {
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageFilterListInput>;
		readonly childContentfulBlogDetailsSectionDescriptionTextNode: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulBlogDetailsSectionDescriptionTextNode: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFilterInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly section_name: InputMaybe<StringQueryOperatorInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulBlogDetailsSectionSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulBlogDetailsSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulBlogDetailsSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulBlogDetailsSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulBlogDetailsSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulBlogDetailsSectionGroupConnection_distinctArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
	};

	type ContentfulBlogDetailsSectionGroupConnection_groupArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulBlogDetailsSectionGroupConnection_maxArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
	};

	type ContentfulBlogDetailsSectionGroupConnection_minArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
	};

	type ContentfulBlogDetailsSectionGroupConnection_sumArgs = {
		field: ContentfulBlogDetailsSectionFieldSelector;
	};

	type ContentfulBlogDetailsSectionSortInput = {
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageSortInput>;
		readonly childContentfulBlogDetailsSectionDescriptionTextNode: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulBlogDetailsSectionDescriptionTextNode: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly section_name: InputMaybe<SortOrderEnum>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulBlogDetailsSectionSysSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBlogDetailsSectionSys = {
		readonly contentType: Maybe<ContentfulBlogDetailsSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulBlogDetailsSectionSysContentType = {
		readonly sys: Maybe<ContentfulBlogDetailsSectionSysContentTypeSys>;
	};

	type ContentfulBlogDetailsSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulBlogDetailsSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulBlogDetailsSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulBlogDetailsSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulBlogDetailsSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulBlogDetailsSectionSysContentTypeSysSortInput>;
	};

	type ContentfulBlogDetailsSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulBlogDetailsSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBlogDetailsSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBlogDetailsSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulBlogDetailsSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulBlogDetailsSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulBlogDetailsSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulBlogDetailsSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulBlogDetailsSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulBlogDetailsSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulCard = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly all_blogs: Maybe<ReadonlyArray<Maybe<ContentfulAllBlogs>>>;
			readonly blog_date: Maybe<Scalars['Date']>;
			readonly blog_slug: Maybe<Scalars['String']>;
			readonly button_text: Maybe<Scalars['String']>;
			readonly card_image: Maybe<ContentfulAsset>;
			readonly card_name: Maybe<Scalars['String']>;
			readonly card_section: Maybe<ReadonlyArray<Maybe<ContentfulCardSection>>>;
			/** Returns the first child node of type contentfulCardLongDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulCardLongDescriptionTextNode: Maybe<contentfulCardLongDescriptionTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulCardLongDescriptionTextNode */
			readonly childrenContentfulCardLongDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulCardLongDescriptionTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<Scalars['String']>;
			readonly feature_colour: Maybe<Scalars['String']>;
			readonly feature_slug: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly image_className: Maybe<Scalars['String']>;
			readonly internal: Internal;
			readonly long_description: Maybe<contentfulCardLongDescriptionTextNode>;
			readonly node_locale: Scalars['String'];
			readonly parent: Maybe<Node>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulCardSys>;
			readonly tag: Maybe<Scalars['String']>;
			readonly title: Maybe<Scalars['String']>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulCard_blog_dateArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulCard_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulCard_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulCardConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulCardEdge>;
		readonly group: ReadonlyArray<ContentfulCardGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulCard>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulCardConnection_distinctArgs = {
		field: ContentfulCardFieldSelector;
	};

	type ContentfulCardConnection_groupArgs = {
		field: ContentfulCardFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulCardConnection_maxArgs = {
		field: ContentfulCardFieldSelector;
	};

	type ContentfulCardConnection_minArgs = {
		field: ContentfulCardFieldSelector;
	};

	type ContentfulCardConnection_sumArgs = {
		field: ContentfulCardFieldSelector;
	};

	type ContentfulCardEdge = {
		readonly next: Maybe<ContentfulCard>;
		readonly node: ContentfulCard;
		readonly previous: Maybe<ContentfulCard>;
	};

	type ContentfulCardFieldSelector = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsFieldSelector>;
		readonly blog_date: InputMaybe<FieldSelectorEnum>;
		readonly blog_slug: InputMaybe<FieldSelectorEnum>;
		readonly button_text: InputMaybe<FieldSelectorEnum>;
		readonly card_image: InputMaybe<ContentfulAssetFieldSelector>;
		readonly card_name: InputMaybe<FieldSelectorEnum>;
		readonly card_section: InputMaybe<ContentfulCardSectionFieldSelector>;
		readonly childContentfulCardLongDescriptionTextNode: InputMaybe<contentfulCardLongDescriptionTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulCardLongDescriptionTextNode: InputMaybe<contentfulCardLongDescriptionTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly feature_colour: InputMaybe<FieldSelectorEnum>;
		readonly feature_slug: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly image_className: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly long_description: InputMaybe<contentfulCardLongDescriptionTextNodeFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulCardSysFieldSelector>;
		readonly tag: InputMaybe<FieldSelectorEnum>;
		readonly title: InputMaybe<FieldSelectorEnum>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulCardFilterInput = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsFilterListInput>;
		readonly blog_date: InputMaybe<DateQueryOperatorInput>;
		readonly blog_slug: InputMaybe<StringQueryOperatorInput>;
		readonly button_text: InputMaybe<StringQueryOperatorInput>;
		readonly card_image: InputMaybe<ContentfulAssetFilterInput>;
		readonly card_name: InputMaybe<StringQueryOperatorInput>;
		readonly card_section: InputMaybe<ContentfulCardSectionFilterListInput>;
		readonly childContentfulCardLongDescriptionTextNode: InputMaybe<contentfulCardLongDescriptionTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulCardLongDescriptionTextNode: InputMaybe<contentfulCardLongDescriptionTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly feature_colour: InputMaybe<StringQueryOperatorInput>;
		readonly feature_slug: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly image_className: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly long_description: InputMaybe<contentfulCardLongDescriptionTextNodeFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulCardSysFilterInput>;
		readonly tag: InputMaybe<StringQueryOperatorInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulCardFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulCardFilterInput>;
	};

	type ContentfulCardGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulCardEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulCardGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulCard>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulCardGroupConnection_distinctArgs = {
		field: ContentfulCardFieldSelector;
	};

	type ContentfulCardGroupConnection_groupArgs = {
		field: ContentfulCardFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulCardGroupConnection_maxArgs = {
		field: ContentfulCardFieldSelector;
	};

	type ContentfulCardGroupConnection_minArgs = {
		field: ContentfulCardFieldSelector;
	};

	type ContentfulCardGroupConnection_sumArgs = {
		field: ContentfulCardFieldSelector;
	};

	type ContentfulCardSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly all_blogs: Maybe<ReadonlyArray<Maybe<ContentfulAllBlogs>>>;
			readonly blog_details_page: Maybe<ReadonlyArray<Maybe<ContentfulBlogDetailsPage>>>;
			readonly button_link: Maybe<Scalars['String']>;
			readonly button_text: Maybe<Scalars['String']>;
			readonly card_section_name: Maybe<Scalars['String']>;
			readonly cards: Maybe<ReadonlyArray<Maybe<ContentfulCard>>>;
			/** Returns the first child node of type contentfulCardSectionRichDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulCardSectionRichDescriptionTextNode: Maybe<contentfulCardSectionRichDescriptionTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulCardSectionRichDescriptionTextNode */
			readonly childrenContentfulCardSectionRichDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulCardSectionRichDescriptionTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<Scalars['String']>;
			readonly feature_details_page: Maybe<ReadonlyArray<Maybe<ContentfulFeatureDetailsPage>>>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
			readonly parent: Maybe<Node>;
			readonly rich_description: Maybe<contentfulCardSectionRichDescriptionTextNode>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulCardSectionSys>;
			readonly title: Maybe<Scalars['String']>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulCardSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulCardSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulCardSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulCardSectionEdge>;
		readonly group: ReadonlyArray<ContentfulCardSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulCardSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulCardSectionConnection_distinctArgs = {
		field: ContentfulCardSectionFieldSelector;
	};

	type ContentfulCardSectionConnection_groupArgs = {
		field: ContentfulCardSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulCardSectionConnection_maxArgs = {
		field: ContentfulCardSectionFieldSelector;
	};

	type ContentfulCardSectionConnection_minArgs = {
		field: ContentfulCardSectionFieldSelector;
	};

	type ContentfulCardSectionConnection_sumArgs = {
		field: ContentfulCardSectionFieldSelector;
	};

	type ContentfulCardSectionEdge = {
		readonly next: Maybe<ContentfulCardSection>;
		readonly node: ContentfulCardSection;
		readonly previous: Maybe<ContentfulCardSection>;
	};

	type ContentfulCardSectionFieldSelector = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsFieldSelector>;
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageFieldSelector>;
		readonly button_link: InputMaybe<FieldSelectorEnum>;
		readonly button_text: InputMaybe<FieldSelectorEnum>;
		readonly card_section_name: InputMaybe<FieldSelectorEnum>;
		readonly cards: InputMaybe<ContentfulCardFieldSelector>;
		readonly childContentfulCardSectionRichDescriptionTextNode: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulCardSectionRichDescriptionTextNode: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page: InputMaybe<ContentfulPageFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly rich_description: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFieldSelector>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulCardSectionSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulCardSectionFilterInput = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsFilterListInput>;
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageFilterListInput>;
		readonly button_link: InputMaybe<StringQueryOperatorInput>;
		readonly button_text: InputMaybe<StringQueryOperatorInput>;
		readonly card_section_name: InputMaybe<StringQueryOperatorInput>;
		readonly cards: InputMaybe<ContentfulCardFilterListInput>;
		readonly childContentfulCardSectionRichDescriptionTextNode: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulCardSectionRichDescriptionTextNode: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page: InputMaybe<ContentfulPageFilterListInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly rich_description: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFilterInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulCardSectionSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulCardSectionFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulCardSectionFilterInput>;
	};

	type ContentfulCardSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulCardSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulCardSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulCardSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulCardSectionGroupConnection_distinctArgs = {
		field: ContentfulCardSectionFieldSelector;
	};

	type ContentfulCardSectionGroupConnection_groupArgs = {
		field: ContentfulCardSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulCardSectionGroupConnection_maxArgs = {
		field: ContentfulCardSectionFieldSelector;
	};

	type ContentfulCardSectionGroupConnection_minArgs = {
		field: ContentfulCardSectionFieldSelector;
	};

	type ContentfulCardSectionGroupConnection_sumArgs = {
		field: ContentfulCardSectionFieldSelector;
	};

	type ContentfulCardSectionSortInput = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsSortInput>;
		readonly blog_details_page: InputMaybe<ContentfulBlogDetailsPageSortInput>;
		readonly button_link: InputMaybe<SortOrderEnum>;
		readonly button_text: InputMaybe<SortOrderEnum>;
		readonly card_section_name: InputMaybe<SortOrderEnum>;
		readonly cards: InputMaybe<ContentfulCardSortInput>;
		readonly childContentfulCardSectionRichDescriptionTextNode: InputMaybe<contentfulCardSectionRichDescriptionTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulCardSectionRichDescriptionTextNode: InputMaybe<contentfulCardSectionRichDescriptionTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page: InputMaybe<ContentfulPageSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly rich_description: InputMaybe<contentfulCardSectionRichDescriptionTextNodeSortInput>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulCardSectionSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulCardSectionSys = {
		readonly contentType: Maybe<ContentfulCardSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulCardSectionSysContentType = {
		readonly sys: Maybe<ContentfulCardSectionSysContentTypeSys>;
	};

	type ContentfulCardSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulCardSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulCardSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulCardSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulCardSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulCardSectionSysContentTypeSysSortInput>;
	};

	type ContentfulCardSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulCardSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulCardSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulCardSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulCardSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulCardSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulCardSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulCardSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulCardSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulCardSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulCardSortInput = {
		readonly all_blogs: InputMaybe<ContentfulAllBlogsSortInput>;
		readonly blog_date: InputMaybe<SortOrderEnum>;
		readonly blog_slug: InputMaybe<SortOrderEnum>;
		readonly button_text: InputMaybe<SortOrderEnum>;
		readonly card_image: InputMaybe<ContentfulAssetSortInput>;
		readonly card_name: InputMaybe<SortOrderEnum>;
		readonly card_section: InputMaybe<ContentfulCardSectionSortInput>;
		readonly childContentfulCardLongDescriptionTextNode: InputMaybe<contentfulCardLongDescriptionTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulCardLongDescriptionTextNode: InputMaybe<contentfulCardLongDescriptionTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly feature_colour: InputMaybe<SortOrderEnum>;
		readonly feature_slug: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly image_className: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly long_description: InputMaybe<contentfulCardLongDescriptionTextNodeSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulCardSysSortInput>;
		readonly tag: InputMaybe<SortOrderEnum>;
		readonly title: InputMaybe<SortOrderEnum>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulCardSys = {
		readonly contentType: Maybe<ContentfulCardSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulCardSysContentType = {
		readonly sys: Maybe<ContentfulCardSysContentTypeSys>;
	};

	type ContentfulCardSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulCardSysContentTypeSysFieldSelector>;
	};

	type ContentfulCardSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulCardSysContentTypeSysFilterInput>;
	};

	type ContentfulCardSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulCardSysContentTypeSysSortInput>;
	};

	type ContentfulCardSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulCardSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulCardSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulCardSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulCardSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulCardSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulCardSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulCardSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulCardSysSortInput = {
		readonly contentType: InputMaybe<ContentfulCardSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulContentType = Node & {
		readonly children: ReadonlyArray<Node>;
		readonly description: Maybe<Scalars['String']>;
		readonly displayField: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly name: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<ContentfulContentTypeSys>;
	};

	type ContentfulContentTypeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
		readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulContentType>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulContentTypeConnection_distinctArgs = {
		field: ContentfulContentTypeFieldSelector;
	};

	type ContentfulContentTypeConnection_groupArgs = {
		field: ContentfulContentTypeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulContentTypeConnection_maxArgs = {
		field: ContentfulContentTypeFieldSelector;
	};

	type ContentfulContentTypeConnection_minArgs = {
		field: ContentfulContentTypeFieldSelector;
	};

	type ContentfulContentTypeConnection_sumArgs = {
		field: ContentfulContentTypeFieldSelector;
	};

	type ContentfulContentTypeEdge = {
		readonly next: Maybe<ContentfulContentType>;
		readonly node: ContentfulContentType;
		readonly previous: Maybe<ContentfulContentType>;
	};

	type ContentfulContentTypeFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly displayField: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly name: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<ContentfulContentTypeSysFieldSelector>;
	};

	type ContentfulContentTypeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly displayField: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
	};

	type ContentfulContentTypeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulContentType>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulContentTypeGroupConnection_distinctArgs = {
		field: ContentfulContentTypeFieldSelector;
	};

	type ContentfulContentTypeGroupConnection_groupArgs = {
		field: ContentfulContentTypeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulContentTypeGroupConnection_maxArgs = {
		field: ContentfulContentTypeFieldSelector;
	};

	type ContentfulContentTypeGroupConnection_minArgs = {
		field: ContentfulContentTypeFieldSelector;
	};

	type ContentfulContentTypeGroupConnection_sumArgs = {
		field: ContentfulContentTypeFieldSelector;
	};

	type ContentfulContentTypeSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly displayField: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly name: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<ContentfulContentTypeSysSortInput>;
	};

	type ContentfulContentTypeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulContentTypeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulContentTypeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulContentTypeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulDividedSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			/** Returns the first child node of type contentfulDividedSectionDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulDividedSectionDescriptionTextNode: Maybe<contentfulDividedSectionDescriptionTextNode>;
			/** Returns the first child node of type contentfulDividedSectionTitleTextNode or null if there are no children of given type on this node */
			readonly childContentfulDividedSectionTitleTextNode: Maybe<contentfulDividedSectionTitleTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulDividedSectionDescriptionTextNode */
			readonly childrenContentfulDividedSectionDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulDividedSectionDescriptionTextNode>>
			>;
			/** Returns all children nodes filtered by type contentfulDividedSectionTitleTextNode */
			readonly childrenContentfulDividedSectionTitleTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulDividedSectionTitleTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<contentfulDividedSectionDescriptionTextNode>;
			readonly divided_section_name: Maybe<Scalars['String']>;
			readonly first_image: Maybe<ContentfulAsset>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
			readonly parent: Maybe<Node>;
			readonly second_image: Maybe<ContentfulAsset>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulDividedSectionSys>;
			readonly third_image: Maybe<ContentfulAsset>;
			readonly title: Maybe<contentfulDividedSectionTitleTextNode>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulDividedSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulDividedSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulDividedSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulDividedSectionEdge>;
		readonly group: ReadonlyArray<ContentfulDividedSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulDividedSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulDividedSectionConnection_distinctArgs = {
		field: ContentfulDividedSectionFieldSelector;
	};

	type ContentfulDividedSectionConnection_groupArgs = {
		field: ContentfulDividedSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulDividedSectionConnection_maxArgs = {
		field: ContentfulDividedSectionFieldSelector;
	};

	type ContentfulDividedSectionConnection_minArgs = {
		field: ContentfulDividedSectionFieldSelector;
	};

	type ContentfulDividedSectionConnection_sumArgs = {
		field: ContentfulDividedSectionFieldSelector;
	};

	type ContentfulDividedSectionEdge = {
		readonly next: Maybe<ContentfulDividedSection>;
		readonly node: ContentfulDividedSection;
		readonly previous: Maybe<ContentfulDividedSection>;
	};

	type ContentfulDividedSectionFieldSelector = {
		readonly childContentfulDividedSectionDescriptionTextNode: InputMaybe<contentfulDividedSectionDescriptionTextNodeFieldSelector>;
		readonly childContentfulDividedSectionTitleTextNode: InputMaybe<contentfulDividedSectionTitleTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulDividedSectionDescriptionTextNode: InputMaybe<contentfulDividedSectionDescriptionTextNodeFieldSelector>;
		readonly childrenContentfulDividedSectionTitleTextNode: InputMaybe<contentfulDividedSectionTitleTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<contentfulDividedSectionDescriptionTextNodeFieldSelector>;
		readonly divided_section_name: InputMaybe<FieldSelectorEnum>;
		readonly first_image: InputMaybe<ContentfulAssetFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page: InputMaybe<ContentfulPageFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly second_image: InputMaybe<ContentfulAssetFieldSelector>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulDividedSectionSysFieldSelector>;
		readonly third_image: InputMaybe<ContentfulAssetFieldSelector>;
		readonly title: InputMaybe<contentfulDividedSectionTitleTextNodeFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulDividedSectionFilterInput = {
		readonly childContentfulDividedSectionDescriptionTextNode: InputMaybe<contentfulDividedSectionDescriptionTextNodeFilterInput>;
		readonly childContentfulDividedSectionTitleTextNode: InputMaybe<contentfulDividedSectionTitleTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulDividedSectionDescriptionTextNode: InputMaybe<contentfulDividedSectionDescriptionTextNodeFilterListInput>;
		readonly childrenContentfulDividedSectionTitleTextNode: InputMaybe<contentfulDividedSectionTitleTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<contentfulDividedSectionDescriptionTextNodeFilterInput>;
		readonly divided_section_name: InputMaybe<StringQueryOperatorInput>;
		readonly first_image: InputMaybe<ContentfulAssetFilterInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page: InputMaybe<ContentfulPageFilterListInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly second_image: InputMaybe<ContentfulAssetFilterInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulDividedSectionSysFilterInput>;
		readonly third_image: InputMaybe<ContentfulAssetFilterInput>;
		readonly title: InputMaybe<contentfulDividedSectionTitleTextNodeFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulDividedSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulDividedSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulDividedSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulDividedSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulDividedSectionGroupConnection_distinctArgs = {
		field: ContentfulDividedSectionFieldSelector;
	};

	type ContentfulDividedSectionGroupConnection_groupArgs = {
		field: ContentfulDividedSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulDividedSectionGroupConnection_maxArgs = {
		field: ContentfulDividedSectionFieldSelector;
	};

	type ContentfulDividedSectionGroupConnection_minArgs = {
		field: ContentfulDividedSectionFieldSelector;
	};

	type ContentfulDividedSectionGroupConnection_sumArgs = {
		field: ContentfulDividedSectionFieldSelector;
	};

	type ContentfulDividedSectionSortInput = {
		readonly childContentfulDividedSectionDescriptionTextNode: InputMaybe<contentfulDividedSectionDescriptionTextNodeSortInput>;
		readonly childContentfulDividedSectionTitleTextNode: InputMaybe<contentfulDividedSectionTitleTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulDividedSectionDescriptionTextNode: InputMaybe<contentfulDividedSectionDescriptionTextNodeSortInput>;
		readonly childrenContentfulDividedSectionTitleTextNode: InputMaybe<contentfulDividedSectionTitleTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<contentfulDividedSectionDescriptionTextNodeSortInput>;
		readonly divided_section_name: InputMaybe<SortOrderEnum>;
		readonly first_image: InputMaybe<ContentfulAssetSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page: InputMaybe<ContentfulPageSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly second_image: InputMaybe<ContentfulAssetSortInput>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulDividedSectionSysSortInput>;
		readonly third_image: InputMaybe<ContentfulAssetSortInput>;
		readonly title: InputMaybe<contentfulDividedSectionTitleTextNodeSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulDividedSectionSys = {
		readonly contentType: Maybe<ContentfulDividedSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulDividedSectionSysContentType = {
		readonly sys: Maybe<ContentfulDividedSectionSysContentTypeSys>;
	};

	type ContentfulDividedSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulDividedSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulDividedSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulDividedSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulDividedSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulDividedSectionSysContentTypeSysSortInput>;
	};

	type ContentfulDividedSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulDividedSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulDividedSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulDividedSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulDividedSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulDividedSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulDividedSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulDividedSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulDividedSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulDividedSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulEntry = {
		readonly children: ReadonlyArray<Node>;
		readonly contentful_id: Scalars['String'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly node_locale: Scalars['String'];
		readonly parent: Maybe<Node>;
	};

	type ContentfulEntryConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulEntryEdge>;
		readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulEntry>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulEntryConnection_distinctArgs = {
		field: ContentfulEntryFieldSelector;
	};

	type ContentfulEntryConnection_groupArgs = {
		field: ContentfulEntryFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulEntryConnection_maxArgs = {
		field: ContentfulEntryFieldSelector;
	};

	type ContentfulEntryConnection_minArgs = {
		field: ContentfulEntryFieldSelector;
	};

	type ContentfulEntryConnection_sumArgs = {
		field: ContentfulEntryFieldSelector;
	};

	type ContentfulEntryEdge = {
		readonly next: Maybe<ContentfulEntry>;
		readonly node: ContentfulEntry;
		readonly previous: Maybe<ContentfulEntry>;
	};

	type ContentfulEntryFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
	};

	type ContentfulEntryFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type ContentfulEntryGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulEntryEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulEntry>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulEntryGroupConnection_distinctArgs = {
		field: ContentfulEntryFieldSelector;
	};

	type ContentfulEntryGroupConnection_groupArgs = {
		field: ContentfulEntryFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulEntryGroupConnection_maxArgs = {
		field: ContentfulEntryFieldSelector;
	};

	type ContentfulEntryGroupConnection_minArgs = {
		field: ContentfulEntryFieldSelector;
	};

	type ContentfulEntryGroupConnection_sumArgs = {
		field: ContentfulEntryFieldSelector;
	};

	type ContentfulEntrySortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
	};

	type ContentfulFeature = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly addOnText: Maybe<Scalars['String']>;
			readonly bold: Maybe<Scalars['Boolean']>;
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly essentials_check: Maybe<Scalars['Boolean']>;
			readonly essentials_text: Maybe<Scalars['String']>;
			readonly feature_text: Maybe<Scalars['String']>;
			readonly growth_check: Maybe<Scalars['Boolean']>;
			readonly growth_text: Maybe<Scalars['String']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly lighthouse_check: Maybe<Scalars['Boolean']>;
			readonly lighthouse_text: Maybe<Scalars['String']>;
			readonly newText: Maybe<Scalars['String']>;
			readonly node_locale: Scalars['String'];
			readonly parent: Maybe<Node>;
			readonly plan_feature: Maybe<ReadonlyArray<Maybe<ContentfulPlanFeature>>>;
			readonly price_card: Maybe<ReadonlyArray<Maybe<ContentfulPriceCard>>>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulFeatureSys>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulFeature_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulFeature_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulFeatureConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulFeatureEdge>;
		readonly group: ReadonlyArray<ContentfulFeatureGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulFeature>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulFeatureConnection_distinctArgs = {
		field: ContentfulFeatureFieldSelector;
	};

	type ContentfulFeatureConnection_groupArgs = {
		field: ContentfulFeatureFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulFeatureConnection_maxArgs = {
		field: ContentfulFeatureFieldSelector;
	};

	type ContentfulFeatureConnection_minArgs = {
		field: ContentfulFeatureFieldSelector;
	};

	type ContentfulFeatureConnection_sumArgs = {
		field: ContentfulFeatureFieldSelector;
	};

	type ContentfulFeatureDetailsPage = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly feature_details_page_sections: Maybe<
				ReadonlyArray<Maybe<ContentfulBannerSectionContentfulCardSectionContentfulFeaturesDetailsSectionUnion>>
			>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page_name: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			readonly seo_title: Maybe<Scalars['String']>;
			readonly slug: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulFeatureDetailsPageSys>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulFeatureDetailsPage_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulFeatureDetailsPage_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulFeatureDetailsPageConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulFeatureDetailsPageEdge>;
		readonly group: ReadonlyArray<ContentfulFeatureDetailsPageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulFeatureDetailsPage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulFeatureDetailsPageConnection_distinctArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
	};

	type ContentfulFeatureDetailsPageConnection_groupArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulFeatureDetailsPageConnection_maxArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
	};

	type ContentfulFeatureDetailsPageConnection_minArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
	};

	type ContentfulFeatureDetailsPageConnection_sumArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
	};

	type ContentfulFeatureDetailsPageEdge = {
		readonly next: Maybe<ContentfulFeatureDetailsPage>;
		readonly node: ContentfulFeatureDetailsPage;
		readonly previous: Maybe<ContentfulFeatureDetailsPage>;
	};

	type ContentfulFeatureDetailsPageFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page_name: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly seo_title: InputMaybe<FieldSelectorEnum>;
		readonly slug: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulFeatureDetailsPageSysFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeatureDetailsPageFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page_name: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly seo_title: InputMaybe<StringQueryOperatorInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulFeatureDetailsPageSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulFeatureDetailsPageFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulFeatureDetailsPageFilterInput>;
	};

	type ContentfulFeatureDetailsPageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulFeatureDetailsPageEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulFeatureDetailsPageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulFeatureDetailsPage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulFeatureDetailsPageGroupConnection_distinctArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
	};

	type ContentfulFeatureDetailsPageGroupConnection_groupArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulFeatureDetailsPageGroupConnection_maxArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
	};

	type ContentfulFeatureDetailsPageGroupConnection_minArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
	};

	type ContentfulFeatureDetailsPageGroupConnection_sumArgs = {
		field: ContentfulFeatureDetailsPageFieldSelector;
	};

	type ContentfulFeatureDetailsPageSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page_name: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly seo_title: InputMaybe<SortOrderEnum>;
		readonly slug: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulFeatureDetailsPageSysSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFeatureDetailsPageSys = {
		readonly contentType: Maybe<ContentfulFeatureDetailsPageSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulFeatureDetailsPageSysContentType = {
		readonly sys: Maybe<ContentfulFeatureDetailsPageSysContentTypeSys>;
	};

	type ContentfulFeatureDetailsPageSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulFeatureDetailsPageSysContentTypeSysFieldSelector>;
	};

	type ContentfulFeatureDetailsPageSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulFeatureDetailsPageSysContentTypeSysFilterInput>;
	};

	type ContentfulFeatureDetailsPageSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulFeatureDetailsPageSysContentTypeSysSortInput>;
	};

	type ContentfulFeatureDetailsPageSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulFeatureDetailsPageSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeatureDetailsPageSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulFeatureDetailsPageSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFeatureDetailsPageSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulFeatureDetailsPageSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeatureDetailsPageSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulFeatureDetailsPageSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulFeatureDetailsPageSysSortInput = {
		readonly contentType: InputMaybe<ContentfulFeatureDetailsPageSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFeatureEdge = {
		readonly next: Maybe<ContentfulFeature>;
		readonly node: ContentfulFeature;
		readonly previous: Maybe<ContentfulFeature>;
	};

	type ContentfulFeatureFieldSelector = {
		readonly addOnText: InputMaybe<FieldSelectorEnum>;
		readonly bold: InputMaybe<FieldSelectorEnum>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly essentials_check: InputMaybe<FieldSelectorEnum>;
		readonly essentials_text: InputMaybe<FieldSelectorEnum>;
		readonly feature_text: InputMaybe<FieldSelectorEnum>;
		readonly growth_check: InputMaybe<FieldSelectorEnum>;
		readonly growth_text: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly lighthouse_check: InputMaybe<FieldSelectorEnum>;
		readonly lighthouse_text: InputMaybe<FieldSelectorEnum>;
		readonly newText: InputMaybe<FieldSelectorEnum>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly plan_feature: InputMaybe<ContentfulPlanFeatureFieldSelector>;
		readonly price_card: InputMaybe<ContentfulPriceCardFieldSelector>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulFeatureSysFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeatureFilterInput = {
		readonly addOnText: InputMaybe<StringQueryOperatorInput>;
		readonly bold: InputMaybe<BooleanQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly essentials_check: InputMaybe<BooleanQueryOperatorInput>;
		readonly essentials_text: InputMaybe<StringQueryOperatorInput>;
		readonly feature_text: InputMaybe<StringQueryOperatorInput>;
		readonly growth_check: InputMaybe<BooleanQueryOperatorInput>;
		readonly growth_text: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly lighthouse_check: InputMaybe<BooleanQueryOperatorInput>;
		readonly lighthouse_text: InputMaybe<StringQueryOperatorInput>;
		readonly newText: InputMaybe<StringQueryOperatorInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly plan_feature: InputMaybe<ContentfulPlanFeatureFilterListInput>;
		readonly price_card: InputMaybe<ContentfulPriceCardFilterListInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulFeatureSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulFeatureFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulFeatureFilterInput>;
	};

	type ContentfulFeatureGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulFeatureEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulFeatureGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulFeature>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulFeatureGroupConnection_distinctArgs = {
		field: ContentfulFeatureFieldSelector;
	};

	type ContentfulFeatureGroupConnection_groupArgs = {
		field: ContentfulFeatureFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulFeatureGroupConnection_maxArgs = {
		field: ContentfulFeatureFieldSelector;
	};

	type ContentfulFeatureGroupConnection_minArgs = {
		field: ContentfulFeatureFieldSelector;
	};

	type ContentfulFeatureGroupConnection_sumArgs = {
		field: ContentfulFeatureFieldSelector;
	};

	type ContentfulFeatureSortInput = {
		readonly addOnText: InputMaybe<SortOrderEnum>;
		readonly bold: InputMaybe<SortOrderEnum>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly essentials_check: InputMaybe<SortOrderEnum>;
		readonly essentials_text: InputMaybe<SortOrderEnum>;
		readonly feature_text: InputMaybe<SortOrderEnum>;
		readonly growth_check: InputMaybe<SortOrderEnum>;
		readonly growth_text: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly lighthouse_check: InputMaybe<SortOrderEnum>;
		readonly lighthouse_text: InputMaybe<SortOrderEnum>;
		readonly newText: InputMaybe<SortOrderEnum>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly plan_feature: InputMaybe<ContentfulPlanFeatureSortInput>;
		readonly price_card: InputMaybe<ContentfulPriceCardSortInput>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulFeatureSysSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFeatureSys = {
		readonly contentType: Maybe<ContentfulFeatureSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulFeatureSysContentType = {
		readonly sys: Maybe<ContentfulFeatureSysContentTypeSys>;
	};

	type ContentfulFeatureSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulFeatureSysContentTypeSysFieldSelector>;
	};

	type ContentfulFeatureSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulFeatureSysContentTypeSysFilterInput>;
	};

	type ContentfulFeatureSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulFeatureSysContentTypeSysSortInput>;
	};

	type ContentfulFeatureSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulFeatureSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeatureSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulFeatureSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFeatureSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulFeatureSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeatureSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulFeatureSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulFeatureSysSortInput = {
		readonly contentType: InputMaybe<ContentfulFeatureSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFeaturesDetailsSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			/** Returns the first child node of type contentfulFeaturesDetailsSectionDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulFeaturesDetailsSectionDescriptionTextNode: Maybe<contentfulFeaturesDetailsSectionDescriptionTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulFeaturesDetailsSectionDescriptionTextNode */
			readonly childrenContentfulFeaturesDetailsSectionDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulFeaturesDetailsSectionDescriptionTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<contentfulFeaturesDetailsSectionDescriptionTextNode>;
			readonly feature_details_page: Maybe<ReadonlyArray<Maybe<ContentfulFeatureDetailsPage>>>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly parent: Maybe<Node>;
			readonly section_name: Maybe<Scalars['String']>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulFeaturesDetailsSectionSys>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulFeaturesDetailsSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulFeaturesDetailsSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulFeaturesDetailsSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulFeaturesDetailsSectionEdge>;
		readonly group: ReadonlyArray<ContentfulFeaturesDetailsSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulFeaturesDetailsSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulFeaturesDetailsSectionConnection_distinctArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
	};

	type ContentfulFeaturesDetailsSectionConnection_groupArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulFeaturesDetailsSectionConnection_maxArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
	};

	type ContentfulFeaturesDetailsSectionConnection_minArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
	};

	type ContentfulFeaturesDetailsSectionConnection_sumArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
	};

	type ContentfulFeaturesDetailsSectionEdge = {
		readonly next: Maybe<ContentfulFeaturesDetailsSection>;
		readonly node: ContentfulFeaturesDetailsSection;
		readonly previous: Maybe<ContentfulFeaturesDetailsSection>;
	};

	type ContentfulFeaturesDetailsSectionFieldSelector = {
		readonly childContentfulFeaturesDetailsSectionDescriptionTextNode: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulFeaturesDetailsSectionDescriptionTextNode: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly section_name: InputMaybe<FieldSelectorEnum>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulFeaturesDetailsSectionSysFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeaturesDetailsSectionFilterInput = {
		readonly childContentfulFeaturesDetailsSectionDescriptionTextNode: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulFeaturesDetailsSectionDescriptionTextNode: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFilterInput>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly section_name: InputMaybe<StringQueryOperatorInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulFeaturesDetailsSectionSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulFeaturesDetailsSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulFeaturesDetailsSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulFeaturesDetailsSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulFeaturesDetailsSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulFeaturesDetailsSectionGroupConnection_distinctArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
	};

	type ContentfulFeaturesDetailsSectionGroupConnection_groupArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulFeaturesDetailsSectionGroupConnection_maxArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
	};

	type ContentfulFeaturesDetailsSectionGroupConnection_minArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
	};

	type ContentfulFeaturesDetailsSectionGroupConnection_sumArgs = {
		field: ContentfulFeaturesDetailsSectionFieldSelector;
	};

	type ContentfulFeaturesDetailsSectionSortInput = {
		readonly childContentfulFeaturesDetailsSectionDescriptionTextNode: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulFeaturesDetailsSectionDescriptionTextNode: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSortInput>;
		readonly feature_details_page: InputMaybe<ContentfulFeatureDetailsPageSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly section_name: InputMaybe<SortOrderEnum>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulFeaturesDetailsSectionSysSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFeaturesDetailsSectionSys = {
		readonly contentType: Maybe<ContentfulFeaturesDetailsSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulFeaturesDetailsSectionSysContentType = {
		readonly sys: Maybe<ContentfulFeaturesDetailsSectionSysContentTypeSys>;
	};

	type ContentfulFeaturesDetailsSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulFeaturesDetailsSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulFeaturesDetailsSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulFeaturesDetailsSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulFeaturesDetailsSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulFeaturesDetailsSectionSysContentTypeSysSortInput>;
	};

	type ContentfulFeaturesDetailsSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulFeaturesDetailsSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeaturesDetailsSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulFeaturesDetailsSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFeaturesDetailsSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulFeaturesDetailsSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFeaturesDetailsSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulFeaturesDetailsSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulFeaturesDetailsSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulFeaturesDetailsSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFooterDetailsPageSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			/** Returns the first child node of type contentfulFooterDetailsPageSectionDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulFooterDetailsPageSectionDescriptionTextNode: Maybe<contentfulFooterDetailsPageSectionDescriptionTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulFooterDetailsPageSectionDescriptionTextNode */
			readonly childrenContentfulFooterDetailsPageSectionDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulFooterDetailsPageSectionDescriptionTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<contentfulFooterDetailsPageSectionDescriptionTextNode>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
			readonly parent: Maybe<Node>;
			readonly section_name: Maybe<Scalars['String']>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulFooterDetailsPageSectionSys>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulFooterDetailsPageSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulFooterDetailsPageSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulFooterDetailsPageSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulFooterDetailsPageSectionEdge>;
		readonly group: ReadonlyArray<ContentfulFooterDetailsPageSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulFooterDetailsPageSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulFooterDetailsPageSectionConnection_distinctArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
	};

	type ContentfulFooterDetailsPageSectionConnection_groupArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulFooterDetailsPageSectionConnection_maxArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
	};

	type ContentfulFooterDetailsPageSectionConnection_minArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
	};

	type ContentfulFooterDetailsPageSectionConnection_sumArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
	};

	type ContentfulFooterDetailsPageSectionEdge = {
		readonly next: Maybe<ContentfulFooterDetailsPageSection>;
		readonly node: ContentfulFooterDetailsPageSection;
		readonly previous: Maybe<ContentfulFooterDetailsPageSection>;
	};

	type ContentfulFooterDetailsPageSectionFieldSelector = {
		readonly childContentfulFooterDetailsPageSectionDescriptionTextNode: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulFooterDetailsPageSectionDescriptionTextNode: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page: InputMaybe<ContentfulPageFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly section_name: InputMaybe<FieldSelectorEnum>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulFooterDetailsPageSectionSysFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFooterDetailsPageSectionFilterInput = {
		readonly childContentfulFooterDetailsPageSectionDescriptionTextNode: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulFooterDetailsPageSectionDescriptionTextNode: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFilterInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page: InputMaybe<ContentfulPageFilterListInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly section_name: InputMaybe<StringQueryOperatorInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulFooterDetailsPageSectionSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulFooterDetailsPageSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulFooterDetailsPageSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulFooterDetailsPageSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulFooterDetailsPageSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulFooterDetailsPageSectionGroupConnection_distinctArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
	};

	type ContentfulFooterDetailsPageSectionGroupConnection_groupArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulFooterDetailsPageSectionGroupConnection_maxArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
	};

	type ContentfulFooterDetailsPageSectionGroupConnection_minArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
	};

	type ContentfulFooterDetailsPageSectionGroupConnection_sumArgs = {
		field: ContentfulFooterDetailsPageSectionFieldSelector;
	};

	type ContentfulFooterDetailsPageSectionSortInput = {
		readonly childContentfulFooterDetailsPageSectionDescriptionTextNode: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulFooterDetailsPageSectionDescriptionTextNode: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page: InputMaybe<ContentfulPageSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly section_name: InputMaybe<SortOrderEnum>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulFooterDetailsPageSectionSysSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFooterDetailsPageSectionSys = {
		readonly contentType: Maybe<ContentfulFooterDetailsPageSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulFooterDetailsPageSectionSysContentType = {
		readonly sys: Maybe<ContentfulFooterDetailsPageSectionSysContentTypeSys>;
	};

	type ContentfulFooterDetailsPageSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulFooterDetailsPageSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulFooterDetailsPageSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulFooterDetailsPageSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulFooterDetailsPageSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulFooterDetailsPageSectionSysContentTypeSysSortInput>;
	};

	type ContentfulFooterDetailsPageSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulFooterDetailsPageSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFooterDetailsPageSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulFooterDetailsPageSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulFooterDetailsPageSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulFooterDetailsPageSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulFooterDetailsPageSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulFooterDetailsPageSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulFooterDetailsPageSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulFooterDetailsPageSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulImageCropFocus =
		| 'bottom'
		| 'bottom_right'
		| 'bottom_left'
		| 'center'
		| 'face'
		| 'faces'
		| 'left'
		| 'right'
		| 'top'
		| 'top_left'
		| 'top_right';

	type ContentfulPage = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page_name: Maybe<Scalars['String']>;
			readonly page_title: Maybe<Scalars['String']>;
			readonly parent: Maybe<Node>;
			readonly sections: Maybe<
				ReadonlyArray<
					Maybe<ContentfulBannerSectionContentfulBasicInfoSectionContentfulCardSectionContentfulDividedSectionContentfulFooterDetailsPageSectionContentfulPlanFeatureSectionContentfulPlansSectionUnion>
				>
			>;
			readonly slug: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulPageSys>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulPage_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPage_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPageConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPageEdge>;
		readonly group: ReadonlyArray<ContentfulPageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPageConnection_distinctArgs = {
		field: ContentfulPageFieldSelector;
	};

	type ContentfulPageConnection_groupArgs = {
		field: ContentfulPageFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPageConnection_maxArgs = {
		field: ContentfulPageFieldSelector;
	};

	type ContentfulPageConnection_minArgs = {
		field: ContentfulPageFieldSelector;
	};

	type ContentfulPageConnection_sumArgs = {
		field: ContentfulPageFieldSelector;
	};

	type ContentfulPageEdge = {
		readonly next: Maybe<ContentfulPage>;
		readonly node: ContentfulPage;
		readonly previous: Maybe<ContentfulPage>;
	};

	type ContentfulPageFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page_name: InputMaybe<FieldSelectorEnum>;
		readonly page_title: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly slug: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulPageSysFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPageFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page_name: InputMaybe<StringQueryOperatorInput>;
		readonly page_title: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulPageSysFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulPageFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulPageFilterInput>;
	};

	type ContentfulPageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPageEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulPageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPageGroupConnection_distinctArgs = {
		field: ContentfulPageFieldSelector;
	};

	type ContentfulPageGroupConnection_groupArgs = {
		field: ContentfulPageFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPageGroupConnection_maxArgs = {
		field: ContentfulPageFieldSelector;
	};

	type ContentfulPageGroupConnection_minArgs = {
		field: ContentfulPageFieldSelector;
	};

	type ContentfulPageGroupConnection_sumArgs = {
		field: ContentfulPageFieldSelector;
	};

	type ContentfulPageSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page_name: InputMaybe<SortOrderEnum>;
		readonly page_title: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly slug: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulPageSysSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPageSys = {
		readonly contentType: Maybe<ContentfulPageSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPageSysContentType = {
		readonly sys: Maybe<ContentfulPageSysContentTypeSys>;
	};

	type ContentfulPageSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulPageSysContentTypeSysFieldSelector>;
	};

	type ContentfulPageSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulPageSysContentTypeSysFilterInput>;
	};

	type ContentfulPageSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulPageSysContentTypeSysSortInput>;
	};

	type ContentfulPageSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPageSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPageSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPageSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPageSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulPageSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPageSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulPageSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPageSysSortInput = {
		readonly contentType: InputMaybe<ContentfulPageSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlanFeature = ContentfulEntry &
		ContentfulReference &
		Node & {
			/** Returns the first child node of type contentfulPlanFeatureDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulPlanFeatureDescriptionTextNode: Maybe<contentfulPlanFeatureDescriptionTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulPlanFeatureDescriptionTextNode */
			readonly childrenContentfulPlanFeatureDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulPlanFeatureDescriptionTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<contentfulPlanFeatureDescriptionTextNode>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly parent: Maybe<Node>;
			readonly plan_feature_list: Maybe<ReadonlyArray<Maybe<ContentfulFeature>>>;
			readonly plan_feature_section: Maybe<ReadonlyArray<Maybe<ContentfulPlanFeatureSection>>>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulPlanFeatureSys>;
			readonly title: Maybe<Scalars['String']>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulPlanFeature_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPlanFeature_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPlanFeatureConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPlanFeatureEdge>;
		readonly group: ReadonlyArray<ContentfulPlanFeatureGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPlanFeature>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPlanFeatureConnection_distinctArgs = {
		field: ContentfulPlanFeatureFieldSelector;
	};

	type ContentfulPlanFeatureConnection_groupArgs = {
		field: ContentfulPlanFeatureFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPlanFeatureConnection_maxArgs = {
		field: ContentfulPlanFeatureFieldSelector;
	};

	type ContentfulPlanFeatureConnection_minArgs = {
		field: ContentfulPlanFeatureFieldSelector;
	};

	type ContentfulPlanFeatureConnection_sumArgs = {
		field: ContentfulPlanFeatureFieldSelector;
	};

	type ContentfulPlanFeatureEdge = {
		readonly next: Maybe<ContentfulPlanFeature>;
		readonly node: ContentfulPlanFeature;
		readonly previous: Maybe<ContentfulPlanFeature>;
	};

	type ContentfulPlanFeatureFieldSelector = {
		readonly childContentfulPlanFeatureDescriptionTextNode: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulPlanFeatureDescriptionTextNode: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly plan_feature_list: InputMaybe<ContentfulFeatureFieldSelector>;
		readonly plan_feature_section: InputMaybe<ContentfulPlanFeatureSectionFieldSelector>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulPlanFeatureSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlanFeatureFilterInput = {
		readonly childContentfulPlanFeatureDescriptionTextNode: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulPlanFeatureDescriptionTextNode: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFilterInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly plan_feature_list: InputMaybe<ContentfulFeatureFilterListInput>;
		readonly plan_feature_section: InputMaybe<ContentfulPlanFeatureSectionFilterListInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulPlanFeatureSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulPlanFeatureFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulPlanFeatureFilterInput>;
	};

	type ContentfulPlanFeatureGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPlanFeatureEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulPlanFeatureGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPlanFeature>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPlanFeatureGroupConnection_distinctArgs = {
		field: ContentfulPlanFeatureFieldSelector;
	};

	type ContentfulPlanFeatureGroupConnection_groupArgs = {
		field: ContentfulPlanFeatureFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPlanFeatureGroupConnection_maxArgs = {
		field: ContentfulPlanFeatureFieldSelector;
	};

	type ContentfulPlanFeatureGroupConnection_minArgs = {
		field: ContentfulPlanFeatureFieldSelector;
	};

	type ContentfulPlanFeatureGroupConnection_sumArgs = {
		field: ContentfulPlanFeatureFieldSelector;
	};

	type ContentfulPlanFeatureSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			/** Returns the first child node of type contentfulPlanFeatureSectionDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulPlanFeatureSectionDescriptionTextNode: Maybe<contentfulPlanFeatureSectionDescriptionTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulPlanFeatureSectionDescriptionTextNode */
			readonly childrenContentfulPlanFeatureSectionDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulPlanFeatureSectionDescriptionTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<contentfulPlanFeatureSectionDescriptionTextNode>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
			readonly parent: Maybe<Node>;
			readonly plan_feature_list: Maybe<ReadonlyArray<Maybe<ContentfulPlanFeature>>>;
			readonly plan_feature_section_name: Maybe<Scalars['String']>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulPlanFeatureSectionSys>;
			readonly title: Maybe<Scalars['String']>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulPlanFeatureSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPlanFeatureSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPlanFeatureSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPlanFeatureSectionEdge>;
		readonly group: ReadonlyArray<ContentfulPlanFeatureSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPlanFeatureSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPlanFeatureSectionConnection_distinctArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
	};

	type ContentfulPlanFeatureSectionConnection_groupArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPlanFeatureSectionConnection_maxArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
	};

	type ContentfulPlanFeatureSectionConnection_minArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
	};

	type ContentfulPlanFeatureSectionConnection_sumArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
	};

	type ContentfulPlanFeatureSectionEdge = {
		readonly next: Maybe<ContentfulPlanFeatureSection>;
		readonly node: ContentfulPlanFeatureSection;
		readonly previous: Maybe<ContentfulPlanFeatureSection>;
	};

	type ContentfulPlanFeatureSectionFieldSelector = {
		readonly childContentfulPlanFeatureSectionDescriptionTextNode: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulPlanFeatureSectionDescriptionTextNode: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page: InputMaybe<ContentfulPageFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly plan_feature_list: InputMaybe<ContentfulPlanFeatureFieldSelector>;
		readonly plan_feature_section_name: InputMaybe<FieldSelectorEnum>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulPlanFeatureSectionSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlanFeatureSectionFilterInput = {
		readonly childContentfulPlanFeatureSectionDescriptionTextNode: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulPlanFeatureSectionDescriptionTextNode: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFilterInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page: InputMaybe<ContentfulPageFilterListInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly plan_feature_list: InputMaybe<ContentfulPlanFeatureFilterListInput>;
		readonly plan_feature_section_name: InputMaybe<StringQueryOperatorInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulPlanFeatureSectionSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulPlanFeatureSectionFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulPlanFeatureSectionFilterInput>;
	};

	type ContentfulPlanFeatureSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPlanFeatureSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulPlanFeatureSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPlanFeatureSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPlanFeatureSectionGroupConnection_distinctArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
	};

	type ContentfulPlanFeatureSectionGroupConnection_groupArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPlanFeatureSectionGroupConnection_maxArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
	};

	type ContentfulPlanFeatureSectionGroupConnection_minArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
	};

	type ContentfulPlanFeatureSectionGroupConnection_sumArgs = {
		field: ContentfulPlanFeatureSectionFieldSelector;
	};

	type ContentfulPlanFeatureSectionSortInput = {
		readonly childContentfulPlanFeatureSectionDescriptionTextNode: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulPlanFeatureSectionDescriptionTextNode: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page: InputMaybe<ContentfulPageSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly plan_feature_list: InputMaybe<ContentfulPlanFeatureSortInput>;
		readonly plan_feature_section_name: InputMaybe<SortOrderEnum>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulPlanFeatureSectionSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlanFeatureSectionSys = {
		readonly contentType: Maybe<ContentfulPlanFeatureSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPlanFeatureSectionSysContentType = {
		readonly sys: Maybe<ContentfulPlanFeatureSectionSysContentTypeSys>;
	};

	type ContentfulPlanFeatureSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulPlanFeatureSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulPlanFeatureSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulPlanFeatureSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulPlanFeatureSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulPlanFeatureSectionSysContentTypeSysSortInput>;
	};

	type ContentfulPlanFeatureSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPlanFeatureSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlanFeatureSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPlanFeatureSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlanFeatureSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulPlanFeatureSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlanFeatureSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulPlanFeatureSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPlanFeatureSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulPlanFeatureSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlanFeatureSortInput = {
		readonly childContentfulPlanFeatureDescriptionTextNode: InputMaybe<contentfulPlanFeatureDescriptionTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulPlanFeatureDescriptionTextNode: InputMaybe<contentfulPlanFeatureDescriptionTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<contentfulPlanFeatureDescriptionTextNodeSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly plan_feature_list: InputMaybe<ContentfulFeatureSortInput>;
		readonly plan_feature_section: InputMaybe<ContentfulPlanFeatureSectionSortInput>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulPlanFeatureSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlanFeatureSys = {
		readonly contentType: Maybe<ContentfulPlanFeatureSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPlanFeatureSysContentType = {
		readonly sys: Maybe<ContentfulPlanFeatureSysContentTypeSys>;
	};

	type ContentfulPlanFeatureSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulPlanFeatureSysContentTypeSysFieldSelector>;
	};

	type ContentfulPlanFeatureSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulPlanFeatureSysContentTypeSysFilterInput>;
	};

	type ContentfulPlanFeatureSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulPlanFeatureSysContentTypeSysSortInput>;
	};

	type ContentfulPlanFeatureSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPlanFeatureSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlanFeatureSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPlanFeatureSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlanFeatureSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulPlanFeatureSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlanFeatureSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulPlanFeatureSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPlanFeatureSysSortInput = {
		readonly contentType: InputMaybe<ContentfulPlanFeatureSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlansSection = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly active_profiles: Maybe<Scalars['Int']>;
			readonly calendlyUrl: Maybe<Scalars['String']>;
			readonly cards: Maybe<ReadonlyArray<Maybe<ContentfulPriceCard>>>;
			/** Returns the first child node of type contentfulPlansSectionSubDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulPlansSectionSubDescriptionTextNode: Maybe<contentfulPlansSectionSubDescriptionTextNode>;
			/** Returns the first child node of type contentfulPlansSectionSubTitleTextNode or null if there are no children of given type on this node */
			readonly childContentfulPlansSectionSubTitleTextNode: Maybe<contentfulPlansSectionSubTitleTextNode>;
			/** Returns the first child node of type contentfulPlansSectionTitleTextNode or null if there are no children of given type on this node */
			readonly childContentfulPlansSectionTitleTextNode: Maybe<contentfulPlansSectionTitleTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulPlansSectionSubDescriptionTextNode */
			readonly childrenContentfulPlansSectionSubDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulPlansSectionSubDescriptionTextNode>>
			>;
			/** Returns all children nodes filtered by type contentfulPlansSectionSubTitleTextNode */
			readonly childrenContentfulPlansSectionSubTitleTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulPlansSectionSubTitleTextNode>>
			>;
			/** Returns all children nodes filtered by type contentfulPlansSectionTitleTextNode */
			readonly childrenContentfulPlansSectionTitleTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulPlansSectionTitleTextNode>>
			>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly discount_percentage_yearly: Maybe<Scalars['Int']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly page: Maybe<ReadonlyArray<Maybe<ContentfulPage>>>;
			readonly parent: Maybe<Node>;
			readonly plan_section_name: Maybe<Scalars['String']>;
			readonly slice_name: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sub_description: Maybe<contentfulPlansSectionSubDescriptionTextNode>;
			readonly sub_title: Maybe<contentfulPlansSectionSubTitleTextNode>;
			readonly sys: Maybe<ContentfulPlansSectionSys>;
			readonly title: Maybe<contentfulPlansSectionTitleTextNode>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulPlansSection_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPlansSection_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPlansSectionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPlansSectionEdge>;
		readonly group: ReadonlyArray<ContentfulPlansSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPlansSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPlansSectionConnection_distinctArgs = {
		field: ContentfulPlansSectionFieldSelector;
	};

	type ContentfulPlansSectionConnection_groupArgs = {
		field: ContentfulPlansSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPlansSectionConnection_maxArgs = {
		field: ContentfulPlansSectionFieldSelector;
	};

	type ContentfulPlansSectionConnection_minArgs = {
		field: ContentfulPlansSectionFieldSelector;
	};

	type ContentfulPlansSectionConnection_sumArgs = {
		field: ContentfulPlansSectionFieldSelector;
	};

	type ContentfulPlansSectionEdge = {
		readonly next: Maybe<ContentfulPlansSection>;
		readonly node: ContentfulPlansSection;
		readonly previous: Maybe<ContentfulPlansSection>;
	};

	type ContentfulPlansSectionFieldSelector = {
		readonly active_profiles: InputMaybe<FieldSelectorEnum>;
		readonly calendlyUrl: InputMaybe<FieldSelectorEnum>;
		readonly cards: InputMaybe<ContentfulPriceCardFieldSelector>;
		readonly childContentfulPlansSectionSubDescriptionTextNode: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFieldSelector>;
		readonly childContentfulPlansSectionSubTitleTextNode: InputMaybe<contentfulPlansSectionSubTitleTextNodeFieldSelector>;
		readonly childContentfulPlansSectionTitleTextNode: InputMaybe<contentfulPlansSectionTitleTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulPlansSectionSubDescriptionTextNode: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFieldSelector>;
		readonly childrenContentfulPlansSectionSubTitleTextNode: InputMaybe<contentfulPlansSectionSubTitleTextNodeFieldSelector>;
		readonly childrenContentfulPlansSectionTitleTextNode: InputMaybe<contentfulPlansSectionTitleTextNodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly discount_percentage_yearly: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly page: InputMaybe<ContentfulPageFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly plan_section_name: InputMaybe<FieldSelectorEnum>;
		readonly slice_name: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sub_description: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFieldSelector>;
		readonly sub_title: InputMaybe<contentfulPlansSectionSubTitleTextNodeFieldSelector>;
		readonly sys: InputMaybe<ContentfulPlansSectionSysFieldSelector>;
		readonly title: InputMaybe<contentfulPlansSectionTitleTextNodeFieldSelector>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlansSectionFilterInput = {
		readonly active_profiles: InputMaybe<IntQueryOperatorInput>;
		readonly calendlyUrl: InputMaybe<StringQueryOperatorInput>;
		readonly cards: InputMaybe<ContentfulPriceCardFilterListInput>;
		readonly childContentfulPlansSectionSubDescriptionTextNode: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFilterInput>;
		readonly childContentfulPlansSectionSubTitleTextNode: InputMaybe<contentfulPlansSectionSubTitleTextNodeFilterInput>;
		readonly childContentfulPlansSectionTitleTextNode: InputMaybe<contentfulPlansSectionTitleTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulPlansSectionSubDescriptionTextNode: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFilterListInput>;
		readonly childrenContentfulPlansSectionSubTitleTextNode: InputMaybe<contentfulPlansSectionSubTitleTextNodeFilterListInput>;
		readonly childrenContentfulPlansSectionTitleTextNode: InputMaybe<contentfulPlansSectionTitleTextNodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly discount_percentage_yearly: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly page: InputMaybe<ContentfulPageFilterListInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly plan_section_name: InputMaybe<StringQueryOperatorInput>;
		readonly slice_name: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sub_description: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFilterInput>;
		readonly sub_title: InputMaybe<contentfulPlansSectionSubTitleTextNodeFilterInput>;
		readonly sys: InputMaybe<ContentfulPlansSectionSysFilterInput>;
		readonly title: InputMaybe<contentfulPlansSectionTitleTextNodeFilterInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulPlansSectionFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulPlansSectionFilterInput>;
	};

	type ContentfulPlansSectionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPlansSectionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulPlansSectionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPlansSection>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPlansSectionGroupConnection_distinctArgs = {
		field: ContentfulPlansSectionFieldSelector;
	};

	type ContentfulPlansSectionGroupConnection_groupArgs = {
		field: ContentfulPlansSectionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPlansSectionGroupConnection_maxArgs = {
		field: ContentfulPlansSectionFieldSelector;
	};

	type ContentfulPlansSectionGroupConnection_minArgs = {
		field: ContentfulPlansSectionFieldSelector;
	};

	type ContentfulPlansSectionGroupConnection_sumArgs = {
		field: ContentfulPlansSectionFieldSelector;
	};

	type ContentfulPlansSectionSortInput = {
		readonly active_profiles: InputMaybe<SortOrderEnum>;
		readonly calendlyUrl: InputMaybe<SortOrderEnum>;
		readonly cards: InputMaybe<ContentfulPriceCardSortInput>;
		readonly childContentfulPlansSectionSubDescriptionTextNode: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeSortInput>;
		readonly childContentfulPlansSectionSubTitleTextNode: InputMaybe<contentfulPlansSectionSubTitleTextNodeSortInput>;
		readonly childContentfulPlansSectionTitleTextNode: InputMaybe<contentfulPlansSectionTitleTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulPlansSectionSubDescriptionTextNode: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeSortInput>;
		readonly childrenContentfulPlansSectionSubTitleTextNode: InputMaybe<contentfulPlansSectionSubTitleTextNodeSortInput>;
		readonly childrenContentfulPlansSectionTitleTextNode: InputMaybe<contentfulPlansSectionTitleTextNodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly discount_percentage_yearly: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly page: InputMaybe<ContentfulPageSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly plan_section_name: InputMaybe<SortOrderEnum>;
		readonly slice_name: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sub_description: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeSortInput>;
		readonly sub_title: InputMaybe<contentfulPlansSectionSubTitleTextNodeSortInput>;
		readonly sys: InputMaybe<ContentfulPlansSectionSysSortInput>;
		readonly title: InputMaybe<contentfulPlansSectionTitleTextNodeSortInput>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlansSectionSys = {
		readonly contentType: Maybe<ContentfulPlansSectionSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPlansSectionSysContentType = {
		readonly sys: Maybe<ContentfulPlansSectionSysContentTypeSys>;
	};

	type ContentfulPlansSectionSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulPlansSectionSysContentTypeSysFieldSelector>;
	};

	type ContentfulPlansSectionSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulPlansSectionSysContentTypeSysFilterInput>;
	};

	type ContentfulPlansSectionSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulPlansSectionSysContentTypeSysSortInput>;
	};

	type ContentfulPlansSectionSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPlansSectionSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlansSectionSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPlansSectionSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPlansSectionSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulPlansSectionSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPlansSectionSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulPlansSectionSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPlansSectionSysSortInput = {
		readonly contentType: InputMaybe<ContentfulPlansSectionSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPosts = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly children: ReadonlyArray<Node>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly parent: Maybe<Node>;
			readonly slug: Maybe<Scalars['String']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly sys: Maybe<ContentfulPostsSys>;
			readonly title: Maybe<Scalars['String']>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulPosts_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPosts_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPostsConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPostsEdge>;
		readonly group: ReadonlyArray<ContentfulPostsGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPosts>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPostsConnection_distinctArgs = {
		field: ContentfulPostsFieldSelector;
	};

	type ContentfulPostsConnection_groupArgs = {
		field: ContentfulPostsFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPostsConnection_maxArgs = {
		field: ContentfulPostsFieldSelector;
	};

	type ContentfulPostsConnection_minArgs = {
		field: ContentfulPostsFieldSelector;
	};

	type ContentfulPostsConnection_sumArgs = {
		field: ContentfulPostsFieldSelector;
	};

	type ContentfulPostsEdge = {
		readonly next: Maybe<ContentfulPosts>;
		readonly node: ContentfulPosts;
		readonly previous: Maybe<ContentfulPosts>;
	};

	type ContentfulPostsFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly slug: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulPostsSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPostsFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly slug: InputMaybe<StringQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulPostsSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulPostsGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPostsEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulPostsGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPosts>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPostsGroupConnection_distinctArgs = {
		field: ContentfulPostsFieldSelector;
	};

	type ContentfulPostsGroupConnection_groupArgs = {
		field: ContentfulPostsFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPostsGroupConnection_maxArgs = {
		field: ContentfulPostsFieldSelector;
	};

	type ContentfulPostsGroupConnection_minArgs = {
		field: ContentfulPostsFieldSelector;
	};

	type ContentfulPostsGroupConnection_sumArgs = {
		field: ContentfulPostsFieldSelector;
	};

	type ContentfulPostsSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly slug: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulPostsSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPostsSys = {
		readonly contentType: Maybe<ContentfulPostsSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPostsSysContentType = {
		readonly sys: Maybe<ContentfulPostsSysContentTypeSys>;
	};

	type ContentfulPostsSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulPostsSysContentTypeSysFieldSelector>;
	};

	type ContentfulPostsSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulPostsSysContentTypeSysFilterInput>;
	};

	type ContentfulPostsSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulPostsSysContentTypeSysSortInput>;
	};

	type ContentfulPostsSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPostsSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPostsSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPostsSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPostsSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulPostsSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPostsSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulPostsSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPostsSysSortInput = {
		readonly contentType: InputMaybe<ContentfulPostsSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPriceCard = ContentfulEntry &
		ContentfulReference &
		Node & {
			readonly button_text: Maybe<Scalars['String']>;
			readonly card_name: Maybe<Scalars['String']>;
			/** Returns the first child node of type contentfulPriceCardDescriptionTextNode or null if there are no children of given type on this node */
			readonly childContentfulPriceCardDescriptionTextNode: Maybe<contentfulPriceCardDescriptionTextNode>;
			readonly children: ReadonlyArray<Node>;
			/** Returns all children nodes filtered by type contentfulPriceCardDescriptionTextNode */
			readonly childrenContentfulPriceCardDescriptionTextNode: Maybe<
				ReadonlyArray<Maybe<contentfulPriceCardDescriptionTextNode>>
			>;
			readonly class_name: Maybe<Scalars['String']>;
			readonly contentful_id: Scalars['String'];
			readonly createdAt: Maybe<Scalars['Date']>;
			readonly description: Maybe<contentfulPriceCardDescriptionTextNode>;
			readonly feature_list: Maybe<ReadonlyArray<Maybe<ContentfulFeature>>>;
			readonly id: Scalars['ID'];
			readonly internal: Internal;
			readonly node_locale: Scalars['String'];
			readonly parent: Maybe<Node>;
			readonly plans_section: Maybe<ReadonlyArray<Maybe<ContentfulPlansSection>>>;
			readonly price: Maybe<Scalars['Int']>;
			readonly spaceId: Maybe<Scalars['String']>;
			readonly step: Maybe<Scalars['Int']>;
			readonly stepPrice: Maybe<Scalars['Int']>;
			readonly sys: Maybe<ContentfulPriceCardSys>;
			readonly title: Maybe<Scalars['String']>;
			readonly updatedAt: Maybe<Scalars['Date']>;
		};

	type ContentfulPriceCard_createdAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPriceCard_updatedAtArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type ContentfulPriceCardConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPriceCardEdge>;
		readonly group: ReadonlyArray<ContentfulPriceCardGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPriceCard>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPriceCardConnection_distinctArgs = {
		field: ContentfulPriceCardFieldSelector;
	};

	type ContentfulPriceCardConnection_groupArgs = {
		field: ContentfulPriceCardFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPriceCardConnection_maxArgs = {
		field: ContentfulPriceCardFieldSelector;
	};

	type ContentfulPriceCardConnection_minArgs = {
		field: ContentfulPriceCardFieldSelector;
	};

	type ContentfulPriceCardConnection_sumArgs = {
		field: ContentfulPriceCardFieldSelector;
	};

	type ContentfulPriceCardEdge = {
		readonly next: Maybe<ContentfulPriceCard>;
		readonly node: ContentfulPriceCard;
		readonly previous: Maybe<ContentfulPriceCard>;
	};

	type ContentfulPriceCardFieldSelector = {
		readonly button_text: InputMaybe<FieldSelectorEnum>;
		readonly card_name: InputMaybe<FieldSelectorEnum>;
		readonly childContentfulPriceCardDescriptionTextNode: InputMaybe<contentfulPriceCardDescriptionTextNodeFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenContentfulPriceCardDescriptionTextNode: InputMaybe<contentfulPriceCardDescriptionTextNodeFieldSelector>;
		readonly class_name: InputMaybe<FieldSelectorEnum>;
		readonly contentful_id: InputMaybe<FieldSelectorEnum>;
		readonly createdAt: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<contentfulPriceCardDescriptionTextNodeFieldSelector>;
		readonly feature_list: InputMaybe<ContentfulFeatureFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly node_locale: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly plans_section: InputMaybe<ContentfulPlansSectionFieldSelector>;
		readonly price: InputMaybe<FieldSelectorEnum>;
		readonly spaceId: InputMaybe<FieldSelectorEnum>;
		readonly step: InputMaybe<FieldSelectorEnum>;
		readonly stepPrice: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<ContentfulPriceCardSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
		readonly updatedAt: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPriceCardFilterInput = {
		readonly button_text: InputMaybe<StringQueryOperatorInput>;
		readonly card_name: InputMaybe<StringQueryOperatorInput>;
		readonly childContentfulPriceCardDescriptionTextNode: InputMaybe<contentfulPriceCardDescriptionTextNodeFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenContentfulPriceCardDescriptionTextNode: InputMaybe<contentfulPriceCardDescriptionTextNodeFilterListInput>;
		readonly class_name: InputMaybe<StringQueryOperatorInput>;
		readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
		readonly createdAt: InputMaybe<DateQueryOperatorInput>;
		readonly description: InputMaybe<contentfulPriceCardDescriptionTextNodeFilterInput>;
		readonly feature_list: InputMaybe<ContentfulFeatureFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly node_locale: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly plans_section: InputMaybe<ContentfulPlansSectionFilterListInput>;
		readonly price: InputMaybe<IntQueryOperatorInput>;
		readonly spaceId: InputMaybe<StringQueryOperatorInput>;
		readonly step: InputMaybe<IntQueryOperatorInput>;
		readonly stepPrice: InputMaybe<IntQueryOperatorInput>;
		readonly sys: InputMaybe<ContentfulPriceCardSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
		readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type ContentfulPriceCardFilterListInput = {
		readonly elemMatch: InputMaybe<ContentfulPriceCardFilterInput>;
	};

	type ContentfulPriceCardGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ContentfulPriceCardEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ContentfulPriceCardGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ContentfulPriceCard>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ContentfulPriceCardGroupConnection_distinctArgs = {
		field: ContentfulPriceCardFieldSelector;
	};

	type ContentfulPriceCardGroupConnection_groupArgs = {
		field: ContentfulPriceCardFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ContentfulPriceCardGroupConnection_maxArgs = {
		field: ContentfulPriceCardFieldSelector;
	};

	type ContentfulPriceCardGroupConnection_minArgs = {
		field: ContentfulPriceCardFieldSelector;
	};

	type ContentfulPriceCardGroupConnection_sumArgs = {
		field: ContentfulPriceCardFieldSelector;
	};

	type ContentfulPriceCardSortInput = {
		readonly button_text: InputMaybe<SortOrderEnum>;
		readonly card_name: InputMaybe<SortOrderEnum>;
		readonly childContentfulPriceCardDescriptionTextNode: InputMaybe<contentfulPriceCardDescriptionTextNodeSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenContentfulPriceCardDescriptionTextNode: InputMaybe<contentfulPriceCardDescriptionTextNodeSortInput>;
		readonly class_name: InputMaybe<SortOrderEnum>;
		readonly contentful_id: InputMaybe<SortOrderEnum>;
		readonly createdAt: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<contentfulPriceCardDescriptionTextNodeSortInput>;
		readonly feature_list: InputMaybe<ContentfulFeatureSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly node_locale: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly plans_section: InputMaybe<ContentfulPlansSectionSortInput>;
		readonly price: InputMaybe<SortOrderEnum>;
		readonly spaceId: InputMaybe<SortOrderEnum>;
		readonly step: InputMaybe<SortOrderEnum>;
		readonly stepPrice: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<ContentfulPriceCardSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
		readonly updatedAt: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPriceCardSys = {
		readonly contentType: Maybe<ContentfulPriceCardSysContentType>;
		readonly revision: Maybe<Scalars['Int']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPriceCardSysContentType = {
		readonly sys: Maybe<ContentfulPriceCardSysContentTypeSys>;
	};

	type ContentfulPriceCardSysContentTypeFieldSelector = {
		readonly sys: InputMaybe<ContentfulPriceCardSysContentTypeSysFieldSelector>;
	};

	type ContentfulPriceCardSysContentTypeFilterInput = {
		readonly sys: InputMaybe<ContentfulPriceCardSysContentTypeSysFilterInput>;
	};

	type ContentfulPriceCardSysContentTypeSortInput = {
		readonly sys: InputMaybe<ContentfulPriceCardSysContentTypeSysSortInput>;
	};

	type ContentfulPriceCardSysContentTypeSys = {
		readonly id: Maybe<Scalars['String']>;
		readonly linkType: Maybe<Scalars['String']>;
		readonly type: Maybe<Scalars['String']>;
	};

	type ContentfulPriceCardSysContentTypeSysFieldSelector = {
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly linkType: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPriceCardSysContentTypeSysFilterInput = {
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly linkType: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPriceCardSysContentTypeSysSortInput = {
		readonly id: InputMaybe<SortOrderEnum>;
		readonly linkType: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulPriceCardSysFieldSelector = {
		readonly contentType: InputMaybe<ContentfulPriceCardSysContentTypeFieldSelector>;
		readonly revision: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type ContentfulPriceCardSysFilterInput = {
		readonly contentType: InputMaybe<ContentfulPriceCardSysContentTypeFilterInput>;
		readonly revision: InputMaybe<IntQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type ContentfulPriceCardSysSortInput = {
		readonly contentType: InputMaybe<ContentfulPriceCardSysContentTypeSortInput>;
		readonly revision: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type ContentfulReference = {
		readonly contentful_id: Scalars['String'];
		readonly id: Scalars['ID'];
	};

	type DateQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['Date']>;
		readonly gt: InputMaybe<Scalars['Date']>;
		readonly gte: InputMaybe<Scalars['Date']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
		readonly lt: InputMaybe<Scalars['Date']>;
		readonly lte: InputMaybe<Scalars['Date']>;
		readonly ne: InputMaybe<Scalars['Date']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
	};

	type Directory = Node & {
		readonly absolutePath: Scalars['String'];
		readonly accessTime: Scalars['Date'];
		readonly atime: Scalars['Date'];
		readonly atimeMs: Scalars['Float'];
		readonly base: Scalars['String'];
		readonly birthTime: Scalars['Date'];
		/** @deprecated Use `birthTime` instead */
		readonly birthtime: Maybe<Scalars['Date']>;
		/** @deprecated Use `birthTime` instead */
		readonly birthtimeMs: Maybe<Scalars['Float']>;
		readonly changeTime: Scalars['Date'];
		readonly children: ReadonlyArray<Node>;
		readonly ctime: Scalars['Date'];
		readonly ctimeMs: Scalars['Float'];
		readonly dev: Scalars['Int'];
		readonly dir: Scalars['String'];
		readonly ext: Scalars['String'];
		readonly extension: Scalars['String'];
		readonly gid: Scalars['Int'];
		readonly id: Scalars['ID'];
		readonly ino: Scalars['Float'];
		readonly internal: Internal;
		readonly mode: Scalars['Int'];
		readonly modifiedTime: Scalars['Date'];
		readonly mtime: Scalars['Date'];
		readonly mtimeMs: Scalars['Float'];
		readonly name: Scalars['String'];
		readonly nlink: Scalars['Int'];
		readonly parent: Maybe<Node>;
		readonly prettySize: Scalars['String'];
		readonly rdev: Scalars['Int'];
		readonly relativeDirectory: Scalars['String'];
		readonly relativePath: Scalars['String'];
		readonly root: Scalars['String'];
		readonly size: Scalars['Int'];
		readonly sourceInstanceName: Scalars['String'];
		readonly uid: Scalars['Int'];
	};

	type Directory_accessTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_atimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_birthTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_changeTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_ctimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_modifiedTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type Directory_mtimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type DirectoryConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<DirectoryEdge>;
		readonly group: ReadonlyArray<DirectoryGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Directory>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type DirectoryConnection_distinctArgs = {
		field: DirectoryFieldSelector;
	};

	type DirectoryConnection_groupArgs = {
		field: DirectoryFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type DirectoryConnection_maxArgs = {
		field: DirectoryFieldSelector;
	};

	type DirectoryConnection_minArgs = {
		field: DirectoryFieldSelector;
	};

	type DirectoryConnection_sumArgs = {
		field: DirectoryFieldSelector;
	};

	type DirectoryEdge = {
		readonly next: Maybe<Directory>;
		readonly node: Directory;
		readonly previous: Maybe<Directory>;
	};

	type DirectoryFieldSelector = {
		readonly absolutePath: InputMaybe<FieldSelectorEnum>;
		readonly accessTime: InputMaybe<FieldSelectorEnum>;
		readonly atime: InputMaybe<FieldSelectorEnum>;
		readonly atimeMs: InputMaybe<FieldSelectorEnum>;
		readonly base: InputMaybe<FieldSelectorEnum>;
		readonly birthTime: InputMaybe<FieldSelectorEnum>;
		readonly birthtime: InputMaybe<FieldSelectorEnum>;
		readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
		readonly changeTime: InputMaybe<FieldSelectorEnum>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly ctime: InputMaybe<FieldSelectorEnum>;
		readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
		readonly dev: InputMaybe<FieldSelectorEnum>;
		readonly dir: InputMaybe<FieldSelectorEnum>;
		readonly ext: InputMaybe<FieldSelectorEnum>;
		readonly extension: InputMaybe<FieldSelectorEnum>;
		readonly gid: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly ino: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly mode: InputMaybe<FieldSelectorEnum>;
		readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
		readonly mtime: InputMaybe<FieldSelectorEnum>;
		readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
		readonly name: InputMaybe<FieldSelectorEnum>;
		readonly nlink: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly prettySize: InputMaybe<FieldSelectorEnum>;
		readonly rdev: InputMaybe<FieldSelectorEnum>;
		readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
		readonly relativePath: InputMaybe<FieldSelectorEnum>;
		readonly root: InputMaybe<FieldSelectorEnum>;
		readonly size: InputMaybe<FieldSelectorEnum>;
		readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
		readonly uid: InputMaybe<FieldSelectorEnum>;
	};

	type DirectoryFilterInput = {
		readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
		readonly accessTime: InputMaybe<DateQueryOperatorInput>;
		readonly atime: InputMaybe<DateQueryOperatorInput>;
		readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly base: InputMaybe<StringQueryOperatorInput>;
		readonly birthTime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly changeTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly ctime: InputMaybe<DateQueryOperatorInput>;
		readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly dev: InputMaybe<IntQueryOperatorInput>;
		readonly dir: InputMaybe<StringQueryOperatorInput>;
		readonly ext: InputMaybe<StringQueryOperatorInput>;
		readonly extension: InputMaybe<StringQueryOperatorInput>;
		readonly gid: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly ino: InputMaybe<FloatQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly mode: InputMaybe<IntQueryOperatorInput>;
		readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
		readonly mtime: InputMaybe<DateQueryOperatorInput>;
		readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nlink: InputMaybe<IntQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly prettySize: InputMaybe<StringQueryOperatorInput>;
		readonly rdev: InputMaybe<IntQueryOperatorInput>;
		readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		readonly relativePath: InputMaybe<StringQueryOperatorInput>;
		readonly root: InputMaybe<StringQueryOperatorInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		readonly uid: InputMaybe<IntQueryOperatorInput>;
	};

	type DirectoryGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<DirectoryEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<DirectoryGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Directory>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type DirectoryGroupConnection_distinctArgs = {
		field: DirectoryFieldSelector;
	};

	type DirectoryGroupConnection_groupArgs = {
		field: DirectoryFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type DirectoryGroupConnection_maxArgs = {
		field: DirectoryFieldSelector;
	};

	type DirectoryGroupConnection_minArgs = {
		field: DirectoryFieldSelector;
	};

	type DirectoryGroupConnection_sumArgs = {
		field: DirectoryFieldSelector;
	};

	type DirectorySortInput = {
		readonly absolutePath: InputMaybe<SortOrderEnum>;
		readonly accessTime: InputMaybe<SortOrderEnum>;
		readonly atime: InputMaybe<SortOrderEnum>;
		readonly atimeMs: InputMaybe<SortOrderEnum>;
		readonly base: InputMaybe<SortOrderEnum>;
		readonly birthTime: InputMaybe<SortOrderEnum>;
		readonly birthtime: InputMaybe<SortOrderEnum>;
		readonly birthtimeMs: InputMaybe<SortOrderEnum>;
		readonly changeTime: InputMaybe<SortOrderEnum>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly ctime: InputMaybe<SortOrderEnum>;
		readonly ctimeMs: InputMaybe<SortOrderEnum>;
		readonly dev: InputMaybe<SortOrderEnum>;
		readonly dir: InputMaybe<SortOrderEnum>;
		readonly ext: InputMaybe<SortOrderEnum>;
		readonly extension: InputMaybe<SortOrderEnum>;
		readonly gid: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly ino: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly mode: InputMaybe<SortOrderEnum>;
		readonly modifiedTime: InputMaybe<SortOrderEnum>;
		readonly mtime: InputMaybe<SortOrderEnum>;
		readonly mtimeMs: InputMaybe<SortOrderEnum>;
		readonly name: InputMaybe<SortOrderEnum>;
		readonly nlink: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly prettySize: InputMaybe<SortOrderEnum>;
		readonly rdev: InputMaybe<SortOrderEnum>;
		readonly relativeDirectory: InputMaybe<SortOrderEnum>;
		readonly relativePath: InputMaybe<SortOrderEnum>;
		readonly root: InputMaybe<SortOrderEnum>;
		readonly size: InputMaybe<SortOrderEnum>;
		readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
		readonly uid: InputMaybe<SortOrderEnum>;
	};

	type DuotoneGradient = {
		readonly highlight: Scalars['String'];
		readonly opacity: InputMaybe<Scalars['Int']>;
		readonly shadow: Scalars['String'];
	};

	type FieldSelectorEnum = 'SELECT';

	type File = Node & {
		readonly absolutePath: Scalars['String'];
		readonly accessTime: Scalars['Date'];
		readonly atime: Scalars['Date'];
		readonly atimeMs: Scalars['Float'];
		readonly base: Scalars['String'];
		readonly birthTime: Scalars['Date'];
		/** @deprecated Use `birthTime` instead */
		readonly birthtime: Maybe<Scalars['Date']>;
		/** @deprecated Use `birthTime` instead */
		readonly birthtimeMs: Maybe<Scalars['Float']>;
		readonly blksize: Maybe<Scalars['Int']>;
		readonly blocks: Maybe<Scalars['Int']>;
		readonly changeTime: Scalars['Date'];
		/** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
		readonly childImageSharp: Maybe<ImageSharp>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type ImageSharp */
		readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
		readonly ctime: Scalars['Date'];
		readonly ctimeMs: Scalars['Float'];
		readonly dev: Scalars['Int'];
		readonly dir: Scalars['String'];
		readonly ext: Scalars['String'];
		readonly extension: Scalars['String'];
		readonly gid: Scalars['Int'];
		readonly id: Scalars['ID'];
		readonly ino: Scalars['Float'];
		readonly internal: Internal;
		readonly mode: Scalars['Int'];
		readonly modifiedTime: Scalars['Date'];
		readonly mtime: Scalars['Date'];
		readonly mtimeMs: Scalars['Float'];
		readonly name: Scalars['String'];
		readonly nlink: Scalars['Int'];
		readonly parent: Maybe<Node>;
		readonly prettySize: Scalars['String'];
		/** Copy file to static directory and return public url to it */
		readonly publicURL: Maybe<Scalars['String']>;
		readonly rdev: Scalars['Int'];
		readonly relativeDirectory: Scalars['String'];
		readonly relativePath: Scalars['String'];
		readonly root: Scalars['String'];
		readonly size: Scalars['Int'];
		readonly sourceInstanceName: Scalars['String'];
		readonly uid: Scalars['Int'];
	};

	type File_accessTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_atimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_birthTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_changeTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_ctimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_modifiedTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type File_mtimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type FileConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<FileEdge>;
		readonly group: ReadonlyArray<FileGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<File>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type FileConnection_distinctArgs = {
		field: FileFieldSelector;
	};

	type FileConnection_groupArgs = {
		field: FileFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type FileConnection_maxArgs = {
		field: FileFieldSelector;
	};

	type FileConnection_minArgs = {
		field: FileFieldSelector;
	};

	type FileConnection_sumArgs = {
		field: FileFieldSelector;
	};

	type FileEdge = {
		readonly next: Maybe<File>;
		readonly node: File;
		readonly previous: Maybe<File>;
	};

	type FileFieldSelector = {
		readonly absolutePath: InputMaybe<FieldSelectorEnum>;
		readonly accessTime: InputMaybe<FieldSelectorEnum>;
		readonly atime: InputMaybe<FieldSelectorEnum>;
		readonly atimeMs: InputMaybe<FieldSelectorEnum>;
		readonly base: InputMaybe<FieldSelectorEnum>;
		readonly birthTime: InputMaybe<FieldSelectorEnum>;
		readonly birthtime: InputMaybe<FieldSelectorEnum>;
		readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
		readonly blksize: InputMaybe<FieldSelectorEnum>;
		readonly blocks: InputMaybe<FieldSelectorEnum>;
		readonly changeTime: InputMaybe<FieldSelectorEnum>;
		readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
		readonly ctime: InputMaybe<FieldSelectorEnum>;
		readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
		readonly dev: InputMaybe<FieldSelectorEnum>;
		readonly dir: InputMaybe<FieldSelectorEnum>;
		readonly ext: InputMaybe<FieldSelectorEnum>;
		readonly extension: InputMaybe<FieldSelectorEnum>;
		readonly gid: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly ino: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly mode: InputMaybe<FieldSelectorEnum>;
		readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
		readonly mtime: InputMaybe<FieldSelectorEnum>;
		readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
		readonly name: InputMaybe<FieldSelectorEnum>;
		readonly nlink: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly prettySize: InputMaybe<FieldSelectorEnum>;
		readonly publicURL: InputMaybe<FieldSelectorEnum>;
		readonly rdev: InputMaybe<FieldSelectorEnum>;
		readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
		readonly relativePath: InputMaybe<FieldSelectorEnum>;
		readonly root: InputMaybe<FieldSelectorEnum>;
		readonly size: InputMaybe<FieldSelectorEnum>;
		readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
		readonly uid: InputMaybe<FieldSelectorEnum>;
	};

	type FileFilterInput = {
		readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
		readonly accessTime: InputMaybe<DateQueryOperatorInput>;
		readonly atime: InputMaybe<DateQueryOperatorInput>;
		readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly base: InputMaybe<StringQueryOperatorInput>;
		readonly birthTime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtime: InputMaybe<DateQueryOperatorInput>;
		readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly blksize: InputMaybe<IntQueryOperatorInput>;
		readonly blocks: InputMaybe<IntQueryOperatorInput>;
		readonly changeTime: InputMaybe<DateQueryOperatorInput>;
		readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
		readonly ctime: InputMaybe<DateQueryOperatorInput>;
		readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly dev: InputMaybe<IntQueryOperatorInput>;
		readonly dir: InputMaybe<StringQueryOperatorInput>;
		readonly ext: InputMaybe<StringQueryOperatorInput>;
		readonly extension: InputMaybe<StringQueryOperatorInput>;
		readonly gid: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly ino: InputMaybe<FloatQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly mode: InputMaybe<IntQueryOperatorInput>;
		readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
		readonly mtime: InputMaybe<DateQueryOperatorInput>;
		readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nlink: InputMaybe<IntQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly prettySize: InputMaybe<StringQueryOperatorInput>;
		readonly publicURL: InputMaybe<StringQueryOperatorInput>;
		readonly rdev: InputMaybe<IntQueryOperatorInput>;
		readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		readonly relativePath: InputMaybe<StringQueryOperatorInput>;
		readonly root: InputMaybe<StringQueryOperatorInput>;
		readonly size: InputMaybe<IntQueryOperatorInput>;
		readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		readonly uid: InputMaybe<IntQueryOperatorInput>;
	};

	type FileGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<FileEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<FileGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<File>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type FileGroupConnection_distinctArgs = {
		field: FileFieldSelector;
	};

	type FileGroupConnection_groupArgs = {
		field: FileFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type FileGroupConnection_maxArgs = {
		field: FileFieldSelector;
	};

	type FileGroupConnection_minArgs = {
		field: FileFieldSelector;
	};

	type FileGroupConnection_sumArgs = {
		field: FileFieldSelector;
	};

	type FileSortInput = {
		readonly absolutePath: InputMaybe<SortOrderEnum>;
		readonly accessTime: InputMaybe<SortOrderEnum>;
		readonly atime: InputMaybe<SortOrderEnum>;
		readonly atimeMs: InputMaybe<SortOrderEnum>;
		readonly base: InputMaybe<SortOrderEnum>;
		readonly birthTime: InputMaybe<SortOrderEnum>;
		readonly birthtime: InputMaybe<SortOrderEnum>;
		readonly birthtimeMs: InputMaybe<SortOrderEnum>;
		readonly blksize: InputMaybe<SortOrderEnum>;
		readonly blocks: InputMaybe<SortOrderEnum>;
		readonly changeTime: InputMaybe<SortOrderEnum>;
		readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
		readonly ctime: InputMaybe<SortOrderEnum>;
		readonly ctimeMs: InputMaybe<SortOrderEnum>;
		readonly dev: InputMaybe<SortOrderEnum>;
		readonly dir: InputMaybe<SortOrderEnum>;
		readonly ext: InputMaybe<SortOrderEnum>;
		readonly extension: InputMaybe<SortOrderEnum>;
		readonly gid: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly ino: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly mode: InputMaybe<SortOrderEnum>;
		readonly modifiedTime: InputMaybe<SortOrderEnum>;
		readonly mtime: InputMaybe<SortOrderEnum>;
		readonly mtimeMs: InputMaybe<SortOrderEnum>;
		readonly name: InputMaybe<SortOrderEnum>;
		readonly nlink: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly prettySize: InputMaybe<SortOrderEnum>;
		readonly publicURL: InputMaybe<SortOrderEnum>;
		readonly rdev: InputMaybe<SortOrderEnum>;
		readonly relativeDirectory: InputMaybe<SortOrderEnum>;
		readonly relativePath: InputMaybe<SortOrderEnum>;
		readonly root: InputMaybe<SortOrderEnum>;
		readonly size: InputMaybe<SortOrderEnum>;
		readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
		readonly uid: InputMaybe<SortOrderEnum>;
	};

	type FloatQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['Float']>;
		readonly gt: InputMaybe<Scalars['Float']>;
		readonly gte: InputMaybe<Scalars['Float']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
		readonly lt: InputMaybe<Scalars['Float']>;
		readonly lte: InputMaybe<Scalars['Float']>;
		readonly ne: InputMaybe<Scalars['Float']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
	};

	type GatsbyImageDataQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
		readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
	};

	type GatsbyImageFormat = 'auto' | 'avif' | 'jpg' | '' | 'png' | 'webp';

	type GatsbyImageLayout = 'constrained' | 'fixed' | 'fullWidth';

	type GatsbyImagePlaceholder = 'blurred' | 'dominantColor' | 'none' | 'tracedSVG';

	type ImageCropFocus = 17 | 0 | 2 | 16 | 1 | 5 | 8 | 3 | 6 | 7 | 4;

	type ImageFit = 'contain' | 'cover' | 'fill' | 'inside' | 'outside';

	type ImageFormat = '' | 'avif' | 'jpg' | '' | 'png' | 'webp';

	type ImageLayout = 'constrained' | 'fixed' | 'fullWidth';

	type ImagePlaceholder = 'blurred' | 'dominantColor' | 'none' | 'tracedSVG';

	type ImageResizingBehavior =
		/** Crop a part of the original image to match the specified size. */
		| 'crop'
		/** Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled. */
		| 'fill'
		| ''
		/** Same as the default resizing, but adds padding so that the generated image has the specified dimensions. */
		| 'pad'
		/** Scale the image regardless of the original aspect ratio. */
		| 'scale'
		/** When used in association with the f parameter below, creates a thumbnail from the image based on a focus area. */
		| 'thumb';

	type ImageSharp = Node & {
		readonly children: ReadonlyArray<Node>;
		readonly fixed: Maybe<ImageSharpFixed>;
		readonly fluid: Maybe<ImageSharpFluid>;
		readonly gatsbyImageData: Scalars['GatsbyImageData'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly original: Maybe<ImageSharpOriginal>;
		readonly parent: Maybe<Node>;
		readonly resize: Maybe<ImageSharpResize>;
	};

	type ImageSharp_fixedArgs = {
		background?: InputMaybe<Scalars['String']>;
		base64Width: InputMaybe<Scalars['Int']>;
		cropFocus?: InputMaybe<ImageCropFocus>;
		duotone: InputMaybe<DuotoneGradient>;
		fit?: InputMaybe<ImageFit>;
		grayscale?: InputMaybe<Scalars['Boolean']>;
		height: InputMaybe<Scalars['Int']>;
		jpegProgressive?: InputMaybe<Scalars['Boolean']>;
		jpegQuality: InputMaybe<Scalars['Int']>;
		pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
		pngQuality: InputMaybe<Scalars['Int']>;
		quality: InputMaybe<Scalars['Int']>;
		rotate?: InputMaybe<Scalars['Int']>;
		toFormat?: InputMaybe<ImageFormat>;
		toFormatBase64?: InputMaybe<ImageFormat>;
		traceSVG: InputMaybe<Potrace>;
		trim?: InputMaybe<Scalars['Float']>;
		webpQuality: InputMaybe<Scalars['Int']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ImageSharp_fluidArgs = {
		background?: InputMaybe<Scalars['String']>;
		base64Width: InputMaybe<Scalars['Int']>;
		cropFocus?: InputMaybe<ImageCropFocus>;
		duotone: InputMaybe<DuotoneGradient>;
		fit?: InputMaybe<ImageFit>;
		grayscale?: InputMaybe<Scalars['Boolean']>;
		jpegProgressive?: InputMaybe<Scalars['Boolean']>;
		jpegQuality: InputMaybe<Scalars['Int']>;
		maxHeight: InputMaybe<Scalars['Int']>;
		maxWidth: InputMaybe<Scalars['Int']>;
		pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
		pngQuality: InputMaybe<Scalars['Int']>;
		quality: InputMaybe<Scalars['Int']>;
		rotate?: InputMaybe<Scalars['Int']>;
		sizes?: InputMaybe<Scalars['String']>;
		srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		toFormat?: InputMaybe<ImageFormat>;
		toFormatBase64?: InputMaybe<ImageFormat>;
		traceSVG: InputMaybe<Potrace>;
		trim?: InputMaybe<Scalars['Float']>;
		webpQuality: InputMaybe<Scalars['Int']>;
	};

	type ImageSharp_gatsbyImageDataArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		avifOptions: InputMaybe<AVIFOptions>;
		backgroundColor: InputMaybe<Scalars['String']>;
		blurredOptions: InputMaybe<BlurredOptions>;
		breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
		height: InputMaybe<Scalars['Int']>;
		jpgOptions: InputMaybe<JPGOptions>;
		layout?: InputMaybe<ImageLayout>;
		outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
		placeholder: InputMaybe<ImagePlaceholder>;
		pngOptions: InputMaybe<PNGOptions>;
		quality: InputMaybe<Scalars['Int']>;
		sizes: InputMaybe<Scalars['String']>;
		tracedSVGOptions: InputMaybe<Potrace>;
		transformOptions: InputMaybe<TransformOptions>;
		webpOptions: InputMaybe<WebPOptions>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ImageSharp_resizeArgs = {
		background?: InputMaybe<Scalars['String']>;
		base64?: InputMaybe<Scalars['Boolean']>;
		cropFocus?: InputMaybe<ImageCropFocus>;
		duotone: InputMaybe<DuotoneGradient>;
		fit?: InputMaybe<ImageFit>;
		grayscale?: InputMaybe<Scalars['Boolean']>;
		height: InputMaybe<Scalars['Int']>;
		jpegProgressive?: InputMaybe<Scalars['Boolean']>;
		jpegQuality: InputMaybe<Scalars['Int']>;
		pngCompressionLevel?: InputMaybe<Scalars['Int']>;
		pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
		pngQuality: InputMaybe<Scalars['Int']>;
		quality: InputMaybe<Scalars['Int']>;
		rotate?: InputMaybe<Scalars['Int']>;
		toFormat?: InputMaybe<ImageFormat>;
		traceSVG: InputMaybe<Potrace>;
		trim?: InputMaybe<Scalars['Float']>;
		webpQuality: InputMaybe<Scalars['Int']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type ImageSharpConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ImageSharpEdge>;
		readonly group: ReadonlyArray<ImageSharpGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ImageSharp>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ImageSharpConnection_distinctArgs = {
		field: ImageSharpFieldSelector;
	};

	type ImageSharpConnection_groupArgs = {
		field: ImageSharpFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ImageSharpConnection_maxArgs = {
		field: ImageSharpFieldSelector;
	};

	type ImageSharpConnection_minArgs = {
		field: ImageSharpFieldSelector;
	};

	type ImageSharpConnection_sumArgs = {
		field: ImageSharpFieldSelector;
	};

	type ImageSharpEdge = {
		readonly next: Maybe<ImageSharp>;
		readonly node: ImageSharp;
		readonly previous: Maybe<ImageSharp>;
	};

	type ImageSharpFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
		readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
		readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
	};

	type ImageSharpFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
		readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
		readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
	};

	type ImageSharpFilterListInput = {
		readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
	};

	type ImageSharpFixed = {
		readonly aspectRatio: Maybe<Scalars['Float']>;
		readonly base64: Maybe<Scalars['String']>;
		readonly height: Scalars['Float'];
		readonly originalName: Maybe<Scalars['String']>;
		readonly src: Scalars['String'];
		readonly srcSet: Scalars['String'];
		readonly srcSetWebp: Maybe<Scalars['String']>;
		readonly srcWebp: Maybe<Scalars['String']>;
		readonly tracedSVG: Maybe<Scalars['String']>;
		readonly width: Scalars['Float'];
	};

	type ImageSharpFixedFieldSelector = {
		readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
		readonly base64: InputMaybe<FieldSelectorEnum>;
		readonly height: InputMaybe<FieldSelectorEnum>;
		readonly originalName: InputMaybe<FieldSelectorEnum>;
		readonly src: InputMaybe<FieldSelectorEnum>;
		readonly srcSet: InputMaybe<FieldSelectorEnum>;
		readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
		readonly srcWebp: InputMaybe<FieldSelectorEnum>;
		readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
		readonly width: InputMaybe<FieldSelectorEnum>;
	};

	type ImageSharpFixedFilterInput = {
		readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
		readonly base64: InputMaybe<StringQueryOperatorInput>;
		readonly height: InputMaybe<FloatQueryOperatorInput>;
		readonly originalName: InputMaybe<StringQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly srcSet: InputMaybe<StringQueryOperatorInput>;
		readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
		readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
		readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<FloatQueryOperatorInput>;
	};

	type ImageSharpFixedSortInput = {
		readonly aspectRatio: InputMaybe<SortOrderEnum>;
		readonly base64: InputMaybe<SortOrderEnum>;
		readonly height: InputMaybe<SortOrderEnum>;
		readonly originalName: InputMaybe<SortOrderEnum>;
		readonly src: InputMaybe<SortOrderEnum>;
		readonly srcSet: InputMaybe<SortOrderEnum>;
		readonly srcSetWebp: InputMaybe<SortOrderEnum>;
		readonly srcWebp: InputMaybe<SortOrderEnum>;
		readonly tracedSVG: InputMaybe<SortOrderEnum>;
		readonly width: InputMaybe<SortOrderEnum>;
	};

	type ImageSharpFluid = {
		readonly aspectRatio: Scalars['Float'];
		readonly base64: Maybe<Scalars['String']>;
		readonly originalImg: Maybe<Scalars['String']>;
		readonly originalName: Maybe<Scalars['String']>;
		readonly presentationHeight: Scalars['Int'];
		readonly presentationWidth: Scalars['Int'];
		readonly sizes: Scalars['String'];
		readonly src: Scalars['String'];
		readonly srcSet: Scalars['String'];
		readonly srcSetWebp: Maybe<Scalars['String']>;
		readonly srcWebp: Maybe<Scalars['String']>;
		readonly tracedSVG: Maybe<Scalars['String']>;
	};

	type ImageSharpFluidFieldSelector = {
		readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
		readonly base64: InputMaybe<FieldSelectorEnum>;
		readonly originalImg: InputMaybe<FieldSelectorEnum>;
		readonly originalName: InputMaybe<FieldSelectorEnum>;
		readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
		readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
		readonly sizes: InputMaybe<FieldSelectorEnum>;
		readonly src: InputMaybe<FieldSelectorEnum>;
		readonly srcSet: InputMaybe<FieldSelectorEnum>;
		readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
		readonly srcWebp: InputMaybe<FieldSelectorEnum>;
		readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
	};

	type ImageSharpFluidFilterInput = {
		readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
		readonly base64: InputMaybe<StringQueryOperatorInput>;
		readonly originalImg: InputMaybe<StringQueryOperatorInput>;
		readonly originalName: InputMaybe<StringQueryOperatorInput>;
		readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
		readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
		readonly sizes: InputMaybe<StringQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly srcSet: InputMaybe<StringQueryOperatorInput>;
		readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
		readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
		readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
	};

	type ImageSharpFluidSortInput = {
		readonly aspectRatio: InputMaybe<SortOrderEnum>;
		readonly base64: InputMaybe<SortOrderEnum>;
		readonly originalImg: InputMaybe<SortOrderEnum>;
		readonly originalName: InputMaybe<SortOrderEnum>;
		readonly presentationHeight: InputMaybe<SortOrderEnum>;
		readonly presentationWidth: InputMaybe<SortOrderEnum>;
		readonly sizes: InputMaybe<SortOrderEnum>;
		readonly src: InputMaybe<SortOrderEnum>;
		readonly srcSet: InputMaybe<SortOrderEnum>;
		readonly srcSetWebp: InputMaybe<SortOrderEnum>;
		readonly srcWebp: InputMaybe<SortOrderEnum>;
		readonly tracedSVG: InputMaybe<SortOrderEnum>;
	};

	type ImageSharpGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<ImageSharpEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<ImageSharpGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<ImageSharp>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type ImageSharpGroupConnection_distinctArgs = {
		field: ImageSharpFieldSelector;
	};

	type ImageSharpGroupConnection_groupArgs = {
		field: ImageSharpFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type ImageSharpGroupConnection_maxArgs = {
		field: ImageSharpFieldSelector;
	};

	type ImageSharpGroupConnection_minArgs = {
		field: ImageSharpFieldSelector;
	};

	type ImageSharpGroupConnection_sumArgs = {
		field: ImageSharpFieldSelector;
	};

	type ImageSharpOriginal = {
		readonly height: Maybe<Scalars['Float']>;
		readonly src: Maybe<Scalars['String']>;
		readonly width: Maybe<Scalars['Float']>;
	};

	type ImageSharpOriginalFieldSelector = {
		readonly height: InputMaybe<FieldSelectorEnum>;
		readonly src: InputMaybe<FieldSelectorEnum>;
		readonly width: InputMaybe<FieldSelectorEnum>;
	};

	type ImageSharpOriginalFilterInput = {
		readonly height: InputMaybe<FloatQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<FloatQueryOperatorInput>;
	};

	type ImageSharpOriginalSortInput = {
		readonly height: InputMaybe<SortOrderEnum>;
		readonly src: InputMaybe<SortOrderEnum>;
		readonly width: InputMaybe<SortOrderEnum>;
	};

	type ImageSharpResize = {
		readonly aspectRatio: Maybe<Scalars['Float']>;
		readonly height: Maybe<Scalars['Int']>;
		readonly originalName: Maybe<Scalars['String']>;
		readonly src: Maybe<Scalars['String']>;
		readonly tracedSVG: Maybe<Scalars['String']>;
		readonly width: Maybe<Scalars['Int']>;
	};

	type ImageSharpResizeFieldSelector = {
		readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
		readonly height: InputMaybe<FieldSelectorEnum>;
		readonly originalName: InputMaybe<FieldSelectorEnum>;
		readonly src: InputMaybe<FieldSelectorEnum>;
		readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
		readonly width: InputMaybe<FieldSelectorEnum>;
	};

	type ImageSharpResizeFilterInput = {
		readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly originalName: InputMaybe<StringQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	type ImageSharpResizeSortInput = {
		readonly aspectRatio: InputMaybe<SortOrderEnum>;
		readonly height: InputMaybe<SortOrderEnum>;
		readonly originalName: InputMaybe<SortOrderEnum>;
		readonly src: InputMaybe<SortOrderEnum>;
		readonly tracedSVG: InputMaybe<SortOrderEnum>;
		readonly width: InputMaybe<SortOrderEnum>;
	};

	type ImageSharpSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
		readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
		readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly original: InputMaybe<ImageSharpOriginalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly resize: InputMaybe<ImageSharpResizeSortInput>;
	};

	type IntQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['Int']>;
		readonly gt: InputMaybe<Scalars['Int']>;
		readonly gte: InputMaybe<Scalars['Int']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		readonly lt: InputMaybe<Scalars['Int']>;
		readonly lte: InputMaybe<Scalars['Int']>;
		readonly ne: InputMaybe<Scalars['Int']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
	};

	type Internal = {
		readonly content: Maybe<Scalars['String']>;
		readonly contentDigest: Scalars['String'];
		readonly contentFilePath: Maybe<Scalars['String']>;
		readonly description: Maybe<Scalars['String']>;
		readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly ignoreType: Maybe<Scalars['Boolean']>;
		readonly mediaType: Maybe<Scalars['String']>;
		readonly owner: Scalars['String'];
		readonly type: Scalars['String'];
	};

	type InternalFieldSelector = {
		readonly content: InputMaybe<FieldSelectorEnum>;
		readonly contentDigest: InputMaybe<FieldSelectorEnum>;
		readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
		readonly ignoreType: InputMaybe<FieldSelectorEnum>;
		readonly mediaType: InputMaybe<FieldSelectorEnum>;
		readonly owner: InputMaybe<FieldSelectorEnum>;
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type InternalFilterInput = {
		readonly content: InputMaybe<StringQueryOperatorInput>;
		readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
		readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
		readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
		readonly mediaType: InputMaybe<StringQueryOperatorInput>;
		readonly owner: InputMaybe<StringQueryOperatorInput>;
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type InternalSortInput = {
		readonly content: InputMaybe<SortOrderEnum>;
		readonly contentDigest: InputMaybe<SortOrderEnum>;
		readonly contentFilePath: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly fieldOwners: InputMaybe<SortOrderEnum>;
		readonly ignoreType: InputMaybe<SortOrderEnum>;
		readonly mediaType: InputMaybe<SortOrderEnum>;
		readonly owner: InputMaybe<SortOrderEnum>;
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type JPGOptions = {
		readonly progressive: InputMaybe<Scalars['Boolean']>;
		readonly quality: InputMaybe<Scalars['Int']>;
	};

	type JSONQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['JSON']>;
		readonly glob: InputMaybe<Scalars['JSON']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
		readonly ne: InputMaybe<Scalars['JSON']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
		readonly regex: InputMaybe<Scalars['JSON']>;
	};

	type MarkdownExcerptFormats = 'HTML' | 'MARKDOWN' | 'PLAIN';

	type MarkdownHeading = {
		readonly depth: Maybe<Scalars['Int']>;
		readonly id: Maybe<Scalars['String']>;
		readonly value: Maybe<Scalars['String']>;
	};

	type MarkdownHeadingFieldSelector = {
		readonly depth: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly value: InputMaybe<FieldSelectorEnum>;
	};

	type MarkdownHeadingFilterInput = {
		readonly depth: InputMaybe<IntQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly value: InputMaybe<StringQueryOperatorInput>;
	};

	type MarkdownHeadingFilterListInput = {
		readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
	};

	type MarkdownHeadingLevels = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';

	type MarkdownHeadingSortInput = {
		readonly depth: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly value: InputMaybe<SortOrderEnum>;
	};

	type MarkdownRemark = Node & {
		readonly children: ReadonlyArray<Node>;
		readonly excerpt: Maybe<Scalars['String']>;
		readonly excerptAst: Maybe<Scalars['JSON']>;
		readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
		readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
		readonly html: Maybe<Scalars['String']>;
		readonly htmlAst: Maybe<Scalars['JSON']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly rawMarkdownBody: Maybe<Scalars['String']>;
		readonly tableOfContents: Maybe<Scalars['String']>;
		readonly timeToRead: Maybe<Scalars['Int']>;
		readonly wordCount: Maybe<MarkdownWordCount>;
	};

	type MarkdownRemark_excerptArgs = {
		format?: InputMaybe<MarkdownExcerptFormats>;
		pruneLength?: InputMaybe<Scalars['Int']>;
		truncate?: InputMaybe<Scalars['Boolean']>;
	};

	type MarkdownRemark_excerptAstArgs = {
		pruneLength?: InputMaybe<Scalars['Int']>;
		truncate?: InputMaybe<Scalars['Boolean']>;
	};

	type MarkdownRemark_headingsArgs = {
		depth: InputMaybe<MarkdownHeadingLevels>;
	};

	type MarkdownRemark_tableOfContentsArgs = {
		absolute?: InputMaybe<Scalars['Boolean']>;
		heading: InputMaybe<Scalars['String']>;
		maxDepth: InputMaybe<Scalars['Int']>;
		pathToSlugField?: InputMaybe<Scalars['String']>;
	};

	type MarkdownRemarkConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
		readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<MarkdownRemark>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type MarkdownRemarkConnection_distinctArgs = {
		field: MarkdownRemarkFieldSelector;
	};

	type MarkdownRemarkConnection_groupArgs = {
		field: MarkdownRemarkFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type MarkdownRemarkConnection_maxArgs = {
		field: MarkdownRemarkFieldSelector;
	};

	type MarkdownRemarkConnection_minArgs = {
		field: MarkdownRemarkFieldSelector;
	};

	type MarkdownRemarkConnection_sumArgs = {
		field: MarkdownRemarkFieldSelector;
	};

	type MarkdownRemarkEdge = {
		readonly next: Maybe<MarkdownRemark>;
		readonly node: MarkdownRemark;
		readonly previous: Maybe<MarkdownRemark>;
	};

	type MarkdownRemarkFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly excerpt: InputMaybe<FieldSelectorEnum>;
		readonly excerptAst: InputMaybe<FieldSelectorEnum>;
		readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
		readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
		readonly html: InputMaybe<FieldSelectorEnum>;
		readonly htmlAst: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
		readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
		readonly timeToRead: InputMaybe<FieldSelectorEnum>;
		readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
	};

	type MarkdownRemarkFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly excerpt: InputMaybe<StringQueryOperatorInput>;
		readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
		readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
		readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
		readonly html: InputMaybe<StringQueryOperatorInput>;
		readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
		readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
		readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
		readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
	};

	type MarkdownRemarkFilterListInput = {
		readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
	};

	type MarkdownRemarkFrontmatter = {
		readonly title: Maybe<Scalars['String']>;
	};

	type MarkdownRemarkFrontmatterFieldSelector = {
		readonly title: InputMaybe<FieldSelectorEnum>;
	};

	type MarkdownRemarkFrontmatterFilterInput = {
		readonly title: InputMaybe<StringQueryOperatorInput>;
	};

	type MarkdownRemarkFrontmatterSortInput = {
		readonly title: InputMaybe<SortOrderEnum>;
	};

	type MarkdownRemarkGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<MarkdownRemark>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type MarkdownRemarkGroupConnection_distinctArgs = {
		field: MarkdownRemarkFieldSelector;
	};

	type MarkdownRemarkGroupConnection_groupArgs = {
		field: MarkdownRemarkFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type MarkdownRemarkGroupConnection_maxArgs = {
		field: MarkdownRemarkFieldSelector;
	};

	type MarkdownRemarkGroupConnection_minArgs = {
		field: MarkdownRemarkFieldSelector;
	};

	type MarkdownRemarkGroupConnection_sumArgs = {
		field: MarkdownRemarkFieldSelector;
	};

	type MarkdownRemarkSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly excerpt: InputMaybe<SortOrderEnum>;
		readonly excerptAst: InputMaybe<SortOrderEnum>;
		readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
		readonly headings: InputMaybe<MarkdownHeadingSortInput>;
		readonly html: InputMaybe<SortOrderEnum>;
		readonly htmlAst: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
		readonly tableOfContents: InputMaybe<SortOrderEnum>;
		readonly timeToRead: InputMaybe<SortOrderEnum>;
		readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
	};

	type MarkdownWordCount = {
		readonly paragraphs: Maybe<Scalars['Int']>;
		readonly sentences: Maybe<Scalars['Int']>;
		readonly words: Maybe<Scalars['Int']>;
	};

	type MarkdownWordCountFieldSelector = {
		readonly paragraphs: InputMaybe<FieldSelectorEnum>;
		readonly sentences: InputMaybe<FieldSelectorEnum>;
		readonly words: InputMaybe<FieldSelectorEnum>;
	};

	type MarkdownWordCountFilterInput = {
		readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
		readonly sentences: InputMaybe<IntQueryOperatorInput>;
		readonly words: InputMaybe<IntQueryOperatorInput>;
	};

	type MarkdownWordCountSortInput = {
		readonly paragraphs: InputMaybe<SortOrderEnum>;
		readonly sentences: InputMaybe<SortOrderEnum>;
		readonly words: InputMaybe<SortOrderEnum>;
	};

	/** Node Interface */
	type Node = {
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
	};

	type NodeFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
	};

	type NodeFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type NodeFilterListInput = {
		readonly elemMatch: InputMaybe<NodeFilterInput>;
	};

	type NodeSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
	};

	type PNGOptions = {
		readonly compressionSpeed: InputMaybe<Scalars['Int']>;
		readonly quality: InputMaybe<Scalars['Int']>;
	};

	type PageInfo = {
		readonly currentPage: Scalars['Int'];
		readonly hasNextPage: Scalars['Boolean'];
		readonly hasPreviousPage: Scalars['Boolean'];
		readonly itemCount: Scalars['Int'];
		readonly pageCount: Scalars['Int'];
		readonly perPage: Maybe<Scalars['Int']>;
		readonly totalCount: Scalars['Int'];
	};

	type Potrace = {
		readonly alphaMax: InputMaybe<Scalars['Float']>;
		readonly background: InputMaybe<Scalars['String']>;
		readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
		readonly color: InputMaybe<Scalars['String']>;
		readonly optCurve: InputMaybe<Scalars['Boolean']>;
		readonly optTolerance: InputMaybe<Scalars['Float']>;
		readonly threshold: InputMaybe<Scalars['Int']>;
		readonly turdSize: InputMaybe<Scalars['Float']>;
		readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
	};

	type PotraceTurnPolicy = 'black' | 'left' | 'majority' | 'minority' | 'right' | 'white';

	type Query = {
		readonly allContentfulAllBlogs: ContentfulAllBlogsConnection;
		readonly allContentfulAsset: ContentfulAssetConnection;
		readonly allContentfulBannerSection: ContentfulBannerSectionConnection;
		readonly allContentfulBannerSectionDescriptionTextNode: contentfulBannerSectionDescriptionTextNodeConnection;
		readonly allContentfulBannerSectionRichTitleTextNode: contentfulBannerSectionRichTitleTextNodeConnection;
		readonly allContentfulBasicInfoSection: ContentfulBasicInfoSectionConnection;
		readonly allContentfulBlogDetailsPage: ContentfulBlogDetailsPageConnection;
		readonly allContentfulBlogDetailsSection: ContentfulBlogDetailsSectionConnection;
		readonly allContentfulBlogDetailsSectionDescriptionTextNode: contentfulBlogDetailsSectionDescriptionTextNodeConnection;
		readonly allContentfulCard: ContentfulCardConnection;
		readonly allContentfulCardLongDescriptionTextNode: contentfulCardLongDescriptionTextNodeConnection;
		readonly allContentfulCardSection: ContentfulCardSectionConnection;
		readonly allContentfulCardSectionRichDescriptionTextNode: contentfulCardSectionRichDescriptionTextNodeConnection;
		readonly allContentfulContentType: ContentfulContentTypeConnection;
		readonly allContentfulDividedSection: ContentfulDividedSectionConnection;
		readonly allContentfulDividedSectionDescriptionTextNode: contentfulDividedSectionDescriptionTextNodeConnection;
		readonly allContentfulDividedSectionTitleTextNode: contentfulDividedSectionTitleTextNodeConnection;
		readonly allContentfulEntry: ContentfulEntryConnection;
		readonly allContentfulFeature: ContentfulFeatureConnection;
		readonly allContentfulFeatureDetailsPage: ContentfulFeatureDetailsPageConnection;
		readonly allContentfulFeaturesDetailsSection: ContentfulFeaturesDetailsSectionConnection;
		readonly allContentfulFeaturesDetailsSectionDescriptionTextNode: contentfulFeaturesDetailsSectionDescriptionTextNodeConnection;
		readonly allContentfulFooterDetailsPageSection: ContentfulFooterDetailsPageSectionConnection;
		readonly allContentfulFooterDetailsPageSectionDescriptionTextNode: contentfulFooterDetailsPageSectionDescriptionTextNodeConnection;
		readonly allContentfulPage: ContentfulPageConnection;
		readonly allContentfulPlanFeature: ContentfulPlanFeatureConnection;
		readonly allContentfulPlanFeatureDescriptionTextNode: contentfulPlanFeatureDescriptionTextNodeConnection;
		readonly allContentfulPlanFeatureSection: ContentfulPlanFeatureSectionConnection;
		readonly allContentfulPlanFeatureSectionDescriptionTextNode: contentfulPlanFeatureSectionDescriptionTextNodeConnection;
		readonly allContentfulPlansSection: ContentfulPlansSectionConnection;
		readonly allContentfulPlansSectionSubDescriptionTextNode: contentfulPlansSectionSubDescriptionTextNodeConnection;
		readonly allContentfulPlansSectionSubTitleTextNode: contentfulPlansSectionSubTitleTextNodeConnection;
		readonly allContentfulPlansSectionTitleTextNode: contentfulPlansSectionTitleTextNodeConnection;
		readonly allContentfulPosts: ContentfulPostsConnection;
		readonly allContentfulPriceCard: ContentfulPriceCardConnection;
		readonly allContentfulPriceCardDescriptionTextNode: contentfulPriceCardDescriptionTextNodeConnection;
		readonly allDirectory: DirectoryConnection;
		readonly allFile: FileConnection;
		readonly allImageSharp: ImageSharpConnection;
		readonly allMarkdownRemark: MarkdownRemarkConnection;
		readonly allSite: SiteConnection;
		readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
		readonly allSiteFunction: SiteFunctionConnection;
		readonly allSitePage: SitePageConnection;
		readonly allSitePlugin: SitePluginConnection;
		readonly contentfulAllBlogs: Maybe<ContentfulAllBlogs>;
		readonly contentfulAsset: Maybe<ContentfulAsset>;
		readonly contentfulBannerSection: Maybe<ContentfulBannerSection>;
		readonly contentfulBannerSectionDescriptionTextNode: Maybe<contentfulBannerSectionDescriptionTextNode>;
		readonly contentfulBannerSectionRichTitleTextNode: Maybe<contentfulBannerSectionRichTitleTextNode>;
		readonly contentfulBasicInfoSection: Maybe<ContentfulBasicInfoSection>;
		readonly contentfulBlogDetailsPage: Maybe<ContentfulBlogDetailsPage>;
		readonly contentfulBlogDetailsSection: Maybe<ContentfulBlogDetailsSection>;
		readonly contentfulBlogDetailsSectionDescriptionTextNode: Maybe<contentfulBlogDetailsSectionDescriptionTextNode>;
		readonly contentfulCard: Maybe<ContentfulCard>;
		readonly contentfulCardLongDescriptionTextNode: Maybe<contentfulCardLongDescriptionTextNode>;
		readonly contentfulCardSection: Maybe<ContentfulCardSection>;
		readonly contentfulCardSectionRichDescriptionTextNode: Maybe<contentfulCardSectionRichDescriptionTextNode>;
		readonly contentfulContentType: Maybe<ContentfulContentType>;
		readonly contentfulDividedSection: Maybe<ContentfulDividedSection>;
		readonly contentfulDividedSectionDescriptionTextNode: Maybe<contentfulDividedSectionDescriptionTextNode>;
		readonly contentfulDividedSectionTitleTextNode: Maybe<contentfulDividedSectionTitleTextNode>;
		readonly contentfulEntry: Maybe<ContentfulEntry>;
		readonly contentfulFeature: Maybe<ContentfulFeature>;
		readonly contentfulFeatureDetailsPage: Maybe<ContentfulFeatureDetailsPage>;
		readonly contentfulFeaturesDetailsSection: Maybe<ContentfulFeaturesDetailsSection>;
		readonly contentfulFeaturesDetailsSectionDescriptionTextNode: Maybe<contentfulFeaturesDetailsSectionDescriptionTextNode>;
		readonly contentfulFooterDetailsPageSection: Maybe<ContentfulFooterDetailsPageSection>;
		readonly contentfulFooterDetailsPageSectionDescriptionTextNode: Maybe<contentfulFooterDetailsPageSectionDescriptionTextNode>;
		readonly contentfulPage: Maybe<ContentfulPage>;
		readonly contentfulPlanFeature: Maybe<ContentfulPlanFeature>;
		readonly contentfulPlanFeatureDescriptionTextNode: Maybe<contentfulPlanFeatureDescriptionTextNode>;
		readonly contentfulPlanFeatureSection: Maybe<ContentfulPlanFeatureSection>;
		readonly contentfulPlanFeatureSectionDescriptionTextNode: Maybe<contentfulPlanFeatureSectionDescriptionTextNode>;
		readonly contentfulPlansSection: Maybe<ContentfulPlansSection>;
		readonly contentfulPlansSectionSubDescriptionTextNode: Maybe<contentfulPlansSectionSubDescriptionTextNode>;
		readonly contentfulPlansSectionSubTitleTextNode: Maybe<contentfulPlansSectionSubTitleTextNode>;
		readonly contentfulPlansSectionTitleTextNode: Maybe<contentfulPlansSectionTitleTextNode>;
		readonly contentfulPosts: Maybe<ContentfulPosts>;
		readonly contentfulPriceCard: Maybe<ContentfulPriceCard>;
		readonly contentfulPriceCardDescriptionTextNode: Maybe<contentfulPriceCardDescriptionTextNode>;
		readonly directory: Maybe<Directory>;
		readonly file: Maybe<File>;
		readonly imageSharp: Maybe<ImageSharp>;
		readonly markdownRemark: Maybe<MarkdownRemark>;
		readonly site: Maybe<Site>;
		readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
		readonly siteFunction: Maybe<SiteFunction>;
		readonly sitePage: Maybe<SitePage>;
		readonly sitePlugin: Maybe<SitePlugin>;
	};

	type Query_allContentfulAllBlogsArgs = {
		filter: InputMaybe<ContentfulAllBlogsFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAllBlogsSortInput>>>;
	};

	type Query_allContentfulAssetArgs = {
		filter: InputMaybe<ContentfulAssetFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAssetSortInput>>>;
	};

	type Query_allContentfulBannerSectionArgs = {
		filter: InputMaybe<ContentfulBannerSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBannerSectionSortInput>>>;
	};

	type Query_allContentfulBannerSectionDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulBannerSectionDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBannerSectionDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulBannerSectionRichTitleTextNodeArgs = {
		filter: InputMaybe<contentfulBannerSectionRichTitleTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBannerSectionRichTitleTextNodeSortInput>>>;
	};

	type Query_allContentfulBasicInfoSectionArgs = {
		filter: InputMaybe<ContentfulBasicInfoSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBasicInfoSectionSortInput>>>;
	};

	type Query_allContentfulBlogDetailsPageArgs = {
		filter: InputMaybe<ContentfulBlogDetailsPageFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlogDetailsPageSortInput>>>;
	};

	type Query_allContentfulBlogDetailsSectionArgs = {
		filter: InputMaybe<ContentfulBlogDetailsSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlogDetailsSectionSortInput>>>;
	};

	type Query_allContentfulBlogDetailsSectionDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulCardArgs = {
		filter: InputMaybe<ContentfulCardFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulCardSortInput>>>;
	};

	type Query_allContentfulCardLongDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulCardLongDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulCardLongDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulCardSectionArgs = {
		filter: InputMaybe<ContentfulCardSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulCardSectionSortInput>>>;
	};

	type Query_allContentfulCardSectionRichDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulCardSectionRichDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulContentTypeArgs = {
		filter: InputMaybe<ContentfulContentTypeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulContentTypeSortInput>>>;
	};

	type Query_allContentfulDividedSectionArgs = {
		filter: InputMaybe<ContentfulDividedSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulDividedSectionSortInput>>>;
	};

	type Query_allContentfulDividedSectionDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulDividedSectionDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulDividedSectionDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulDividedSectionTitleTextNodeArgs = {
		filter: InputMaybe<contentfulDividedSectionTitleTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulDividedSectionTitleTextNodeSortInput>>>;
	};

	type Query_allContentfulEntryArgs = {
		filter: InputMaybe<ContentfulEntryFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulEntrySortInput>>>;
	};

	type Query_allContentfulFeatureArgs = {
		filter: InputMaybe<ContentfulFeatureFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulFeatureSortInput>>>;
	};

	type Query_allContentfulFeatureDetailsPageArgs = {
		filter: InputMaybe<ContentfulFeatureDetailsPageFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulFeatureDetailsPageSortInput>>>;
	};

	type Query_allContentfulFeaturesDetailsSectionArgs = {
		filter: InputMaybe<ContentfulFeaturesDetailsSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulFeaturesDetailsSectionSortInput>>>;
	};

	type Query_allContentfulFeaturesDetailsSectionDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulFooterDetailsPageSectionArgs = {
		filter: InputMaybe<ContentfulFooterDetailsPageSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulFooterDetailsPageSectionSortInput>>>;
	};

	type Query_allContentfulFooterDetailsPageSectionDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulPageArgs = {
		filter: InputMaybe<ContentfulPageFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPageSortInput>>>;
	};

	type Query_allContentfulPlanFeatureArgs = {
		filter: InputMaybe<ContentfulPlanFeatureFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPlanFeatureSortInput>>>;
	};

	type Query_allContentfulPlanFeatureDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPlanFeatureDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulPlanFeatureSectionArgs = {
		filter: InputMaybe<ContentfulPlanFeatureSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPlanFeatureSectionSortInput>>>;
	};

	type Query_allContentfulPlanFeatureSectionDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulPlansSectionArgs = {
		filter: InputMaybe<ContentfulPlansSectionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPlansSectionSortInput>>>;
	};

	type Query_allContentfulPlansSectionSubDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPlansSectionSubDescriptionTextNodeSortInput>>>;
	};

	type Query_allContentfulPlansSectionSubTitleTextNodeArgs = {
		filter: InputMaybe<contentfulPlansSectionSubTitleTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPlansSectionSubTitleTextNodeSortInput>>>;
	};

	type Query_allContentfulPlansSectionTitleTextNodeArgs = {
		filter: InputMaybe<contentfulPlansSectionTitleTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPlansSectionTitleTextNodeSortInput>>>;
	};

	type Query_allContentfulPostsArgs = {
		filter: InputMaybe<ContentfulPostsFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPostsSortInput>>>;
	};

	type Query_allContentfulPriceCardArgs = {
		filter: InputMaybe<ContentfulPriceCardFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulPriceCardSortInput>>>;
	};

	type Query_allContentfulPriceCardDescriptionTextNodeArgs = {
		filter: InputMaybe<contentfulPriceCardDescriptionTextNodeFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulPriceCardDescriptionTextNodeSortInput>>>;
	};

	type Query_allDirectoryArgs = {
		filter: InputMaybe<DirectoryFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
	};

	type Query_allFileArgs = {
		filter: InputMaybe<FileFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
	};

	type Query_allImageSharpArgs = {
		filter: InputMaybe<ImageSharpFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
	};

	type Query_allMarkdownRemarkArgs = {
		filter: InputMaybe<MarkdownRemarkFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
	};

	type Query_allSiteArgs = {
		filter: InputMaybe<SiteFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
	};

	type Query_allSiteBuildMetadataArgs = {
		filter: InputMaybe<SiteBuildMetadataFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
	};

	type Query_allSiteFunctionArgs = {
		filter: InputMaybe<SiteFunctionFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
	};

	type Query_allSitePageArgs = {
		filter: InputMaybe<SitePageFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
	};

	type Query_allSitePluginArgs = {
		filter: InputMaybe<SitePluginFilterInput>;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
		sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
	};

	type Query_contentfulAllBlogsArgs = {
		all_blog_section: InputMaybe<StringQueryOperatorInput>;
		all_blogs_banner_section: InputMaybe<ContentfulBannerSectionFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		others_all_blogs_section: InputMaybe<ContentfulCardSectionFilterListInput>;
		parent: InputMaybe<NodeFilterInput>;
		single_blogs: InputMaybe<ContentfulCardFilterListInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulAllBlogsSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulAssetArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		file: InputMaybe<ContentfulAssetFileFilterInput>;
		filename: InputMaybe<StringQueryOperatorInput>;
		filesize: InputMaybe<IntQueryOperatorInput>;
		gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		height: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		mimeType: InputMaybe<StringQueryOperatorInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		placeholderUrl: InputMaybe<StringQueryOperatorInput>;
		publicUrl: InputMaybe<StringQueryOperatorInput>;
		resize: InputMaybe<RemoteFileResizeFilterInput>;
		size: InputMaybe<IntQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulAssetSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
		url: InputMaybe<StringQueryOperatorInput>;
		width: InputMaybe<IntQueryOperatorInput>;
	};

	type Query_contentfulBannerSectionArgs = {
		all_blogs: InputMaybe<ContentfulAllBlogsFilterListInput>;
		background_image: InputMaybe<ContentfulAssetFilterInput>;
		banner_page_name: InputMaybe<StringQueryOperatorInput>;
		blog_date: InputMaybe<DateQueryOperatorInput>;
		blog_details_page: InputMaybe<ContentfulBlogDetailsPageFilterListInput>;
		button_link: InputMaybe<StringQueryOperatorInput>;
		button_text: InputMaybe<StringQueryOperatorInput>;
		childContentfulBannerSectionDescriptionTextNode: InputMaybe<contentfulBannerSectionDescriptionTextNodeFilterInput>;
		childContentfulBannerSectionRichTitleTextNode: InputMaybe<contentfulBannerSectionRichTitleTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulBannerSectionDescriptionTextNode: InputMaybe<contentfulBannerSectionDescriptionTextNodeFilterListInput>;
		childrenContentfulBannerSectionRichTitleTextNode: InputMaybe<contentfulBannerSectionRichTitleTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<contentfulBannerSectionDescriptionTextNodeFilterInput>;
		feature_colour: InputMaybe<StringQueryOperatorInput>;
		feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		image: InputMaybe<ContentfulAssetFilterInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page: InputMaybe<ContentfulPageFilterListInput>;
		parent: InputMaybe<NodeFilterInput>;
		rich_title: InputMaybe<contentfulBannerSectionRichTitleTextNodeFilterInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulBannerSectionSysFilterInput>;
		title: InputMaybe<ContentfulBannerSectionTitleFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulBannerSectionDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulBannerSectionDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulBannerSectionRichTitleTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		rich_title: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<contentfulBannerSectionRichTitleTextNodeSysFilterInput>;
	};

	type Query_contentfulBasicInfoSectionArgs = {
		basic_info_section_name: InputMaybe<StringQueryOperatorInput>;
		button_link: InputMaybe<StringQueryOperatorInput>;
		button_text: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page: InputMaybe<ContentfulPageFilterListInput>;
		parent: InputMaybe<NodeFilterInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sub_title: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulBasicInfoSectionSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulBlogDetailsPageArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page_name: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		seo_title: InputMaybe<StringQueryOperatorInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulBlogDetailsPageSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulBlogDetailsSectionArgs = {
		blog_details_page: InputMaybe<ContentfulBlogDetailsPageFilterListInput>;
		childContentfulBlogDetailsSectionDescriptionTextNode: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulBlogDetailsSectionDescriptionTextNode: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFilterInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		section_name: InputMaybe<StringQueryOperatorInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulBlogDetailsSectionSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulBlogDetailsSectionDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulCardArgs = {
		all_blogs: InputMaybe<ContentfulAllBlogsFilterListInput>;
		blog_date: InputMaybe<DateQueryOperatorInput>;
		blog_slug: InputMaybe<StringQueryOperatorInput>;
		button_text: InputMaybe<StringQueryOperatorInput>;
		card_image: InputMaybe<ContentfulAssetFilterInput>;
		card_name: InputMaybe<StringQueryOperatorInput>;
		card_section: InputMaybe<ContentfulCardSectionFilterListInput>;
		childContentfulCardLongDescriptionTextNode: InputMaybe<contentfulCardLongDescriptionTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulCardLongDescriptionTextNode: InputMaybe<contentfulCardLongDescriptionTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		feature_colour: InputMaybe<StringQueryOperatorInput>;
		feature_slug: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		image_className: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		long_description: InputMaybe<contentfulCardLongDescriptionTextNodeFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulCardSysFilterInput>;
		tag: InputMaybe<StringQueryOperatorInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulCardLongDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		long_description: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulCardLongDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulCardSectionArgs = {
		all_blogs: InputMaybe<ContentfulAllBlogsFilterListInput>;
		blog_details_page: InputMaybe<ContentfulBlogDetailsPageFilterListInput>;
		button_link: InputMaybe<StringQueryOperatorInput>;
		button_text: InputMaybe<StringQueryOperatorInput>;
		card_section_name: InputMaybe<StringQueryOperatorInput>;
		cards: InputMaybe<ContentfulCardFilterListInput>;
		childContentfulCardSectionRichDescriptionTextNode: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulCardSectionRichDescriptionTextNode: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page: InputMaybe<ContentfulPageFilterListInput>;
		parent: InputMaybe<NodeFilterInput>;
		rich_description: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFilterInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulCardSectionSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulCardSectionRichDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		rich_description: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<contentfulCardSectionRichDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulContentTypeArgs = {
		children: InputMaybe<NodeFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		displayField: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
	};

	type Query_contentfulDividedSectionArgs = {
		childContentfulDividedSectionDescriptionTextNode: InputMaybe<contentfulDividedSectionDescriptionTextNodeFilterInput>;
		childContentfulDividedSectionTitleTextNode: InputMaybe<contentfulDividedSectionTitleTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulDividedSectionDescriptionTextNode: InputMaybe<contentfulDividedSectionDescriptionTextNodeFilterListInput>;
		childrenContentfulDividedSectionTitleTextNode: InputMaybe<contentfulDividedSectionTitleTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<contentfulDividedSectionDescriptionTextNodeFilterInput>;
		divided_section_name: InputMaybe<StringQueryOperatorInput>;
		first_image: InputMaybe<ContentfulAssetFilterInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page: InputMaybe<ContentfulPageFilterListInput>;
		parent: InputMaybe<NodeFilterInput>;
		second_image: InputMaybe<ContentfulAssetFilterInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulDividedSectionSysFilterInput>;
		third_image: InputMaybe<ContentfulAssetFilterInput>;
		title: InputMaybe<contentfulDividedSectionTitleTextNodeFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulDividedSectionDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulDividedSectionDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulDividedSectionTitleTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulDividedSectionTitleTextNodeSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_contentfulEntryArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_contentfulFeatureArgs = {
		addOnText: InputMaybe<StringQueryOperatorInput>;
		bold: InputMaybe<BooleanQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		essentials_check: InputMaybe<BooleanQueryOperatorInput>;
		essentials_text: InputMaybe<StringQueryOperatorInput>;
		feature_text: InputMaybe<StringQueryOperatorInput>;
		growth_check: InputMaybe<BooleanQueryOperatorInput>;
		growth_text: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		lighthouse_check: InputMaybe<BooleanQueryOperatorInput>;
		lighthouse_text: InputMaybe<StringQueryOperatorInput>;
		newText: InputMaybe<StringQueryOperatorInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		plan_feature: InputMaybe<ContentfulPlanFeatureFilterListInput>;
		price_card: InputMaybe<ContentfulPriceCardFilterListInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulFeatureSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulFeatureDetailsPageArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page_name: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		seo_title: InputMaybe<StringQueryOperatorInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulFeatureDetailsPageSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulFeaturesDetailsSectionArgs = {
		childContentfulFeaturesDetailsSectionDescriptionTextNode: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulFeaturesDetailsSectionDescriptionTextNode: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFilterInput>;
		feature_details_page: InputMaybe<ContentfulFeatureDetailsPageFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		section_name: InputMaybe<StringQueryOperatorInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulFeaturesDetailsSectionSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulFeaturesDetailsSectionDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulFooterDetailsPageSectionArgs = {
		childContentfulFooterDetailsPageSectionDescriptionTextNode: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulFooterDetailsPageSectionDescriptionTextNode: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFilterInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page: InputMaybe<ContentfulPageFilterListInput>;
		parent: InputMaybe<NodeFilterInput>;
		section_name: InputMaybe<StringQueryOperatorInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulFooterDetailsPageSectionSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulFooterDetailsPageSectionDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulPageArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page_name: InputMaybe<StringQueryOperatorInput>;
		page_title: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulPageSysFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulPlanFeatureArgs = {
		childContentfulPlanFeatureDescriptionTextNode: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulPlanFeatureDescriptionTextNode: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFilterInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		plan_feature_list: InputMaybe<ContentfulFeatureFilterListInput>;
		plan_feature_section: InputMaybe<ContentfulPlanFeatureSectionFilterListInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulPlanFeatureSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulPlanFeatureDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulPlanFeatureDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulPlanFeatureSectionArgs = {
		childContentfulPlanFeatureSectionDescriptionTextNode: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulPlanFeatureSectionDescriptionTextNode: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFilterInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page: InputMaybe<ContentfulPageFilterListInput>;
		parent: InputMaybe<NodeFilterInput>;
		plan_feature_list: InputMaybe<ContentfulPlanFeatureFilterListInput>;
		plan_feature_section_name: InputMaybe<StringQueryOperatorInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulPlanFeatureSectionSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulPlanFeatureSectionDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulPlansSectionArgs = {
		active_profiles: InputMaybe<IntQueryOperatorInput>;
		calendlyUrl: InputMaybe<StringQueryOperatorInput>;
		cards: InputMaybe<ContentfulPriceCardFilterListInput>;
		childContentfulPlansSectionSubDescriptionTextNode: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFilterInput>;
		childContentfulPlansSectionSubTitleTextNode: InputMaybe<contentfulPlansSectionSubTitleTextNodeFilterInput>;
		childContentfulPlansSectionTitleTextNode: InputMaybe<contentfulPlansSectionTitleTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulPlansSectionSubDescriptionTextNode: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFilterListInput>;
		childrenContentfulPlansSectionSubTitleTextNode: InputMaybe<contentfulPlansSectionSubTitleTextNodeFilterListInput>;
		childrenContentfulPlansSectionTitleTextNode: InputMaybe<contentfulPlansSectionTitleTextNodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		discount_percentage_yearly: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		page: InputMaybe<ContentfulPageFilterListInput>;
		parent: InputMaybe<NodeFilterInput>;
		plan_section_name: InputMaybe<StringQueryOperatorInput>;
		slice_name: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sub_description: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFilterInput>;
		sub_title: InputMaybe<contentfulPlansSectionSubTitleTextNodeFilterInput>;
		sys: InputMaybe<ContentfulPlansSectionSysFilterInput>;
		title: InputMaybe<contentfulPlansSectionTitleTextNodeFilterInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulPlansSectionSubDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sub_description: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeSysFilterInput>;
	};

	type Query_contentfulPlansSectionSubTitleTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sub_title: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<contentfulPlansSectionSubTitleTextNodeSysFilterInput>;
	};

	type Query_contentfulPlansSectionTitleTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulPlansSectionTitleTextNodeSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_contentfulPostsArgs = {
		children: InputMaybe<NodeFilterListInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		slug: InputMaybe<StringQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		sys: InputMaybe<ContentfulPostsSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulPriceCardArgs = {
		button_text: InputMaybe<StringQueryOperatorInput>;
		card_name: InputMaybe<StringQueryOperatorInput>;
		childContentfulPriceCardDescriptionTextNode: InputMaybe<contentfulPriceCardDescriptionTextNodeFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenContentfulPriceCardDescriptionTextNode: InputMaybe<contentfulPriceCardDescriptionTextNodeFilterListInput>;
		class_name: InputMaybe<StringQueryOperatorInput>;
		contentful_id: InputMaybe<StringQueryOperatorInput>;
		createdAt: InputMaybe<DateQueryOperatorInput>;
		description: InputMaybe<contentfulPriceCardDescriptionTextNodeFilterInput>;
		feature_list: InputMaybe<ContentfulFeatureFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		node_locale: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		plans_section: InputMaybe<ContentfulPlansSectionFilterListInput>;
		price: InputMaybe<IntQueryOperatorInput>;
		spaceId: InputMaybe<StringQueryOperatorInput>;
		step: InputMaybe<IntQueryOperatorInput>;
		stepPrice: InputMaybe<IntQueryOperatorInput>;
		sys: InputMaybe<ContentfulPriceCardSysFilterInput>;
		title: InputMaybe<StringQueryOperatorInput>;
		updatedAt: InputMaybe<DateQueryOperatorInput>;
	};

	type Query_contentfulPriceCardDescriptionTextNodeArgs = {
		childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		description: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		sys: InputMaybe<contentfulPriceCardDescriptionTextNodeSysFilterInput>;
	};

	type Query_directoryArgs = {
		absolutePath: InputMaybe<StringQueryOperatorInput>;
		accessTime: InputMaybe<DateQueryOperatorInput>;
		atime: InputMaybe<DateQueryOperatorInput>;
		atimeMs: InputMaybe<FloatQueryOperatorInput>;
		base: InputMaybe<StringQueryOperatorInput>;
		birthTime: InputMaybe<DateQueryOperatorInput>;
		birthtime: InputMaybe<DateQueryOperatorInput>;
		birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		changeTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		ctime: InputMaybe<DateQueryOperatorInput>;
		ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		dev: InputMaybe<IntQueryOperatorInput>;
		dir: InputMaybe<StringQueryOperatorInput>;
		ext: InputMaybe<StringQueryOperatorInput>;
		extension: InputMaybe<StringQueryOperatorInput>;
		gid: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		ino: InputMaybe<FloatQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		mode: InputMaybe<IntQueryOperatorInput>;
		modifiedTime: InputMaybe<DateQueryOperatorInput>;
		mtime: InputMaybe<DateQueryOperatorInput>;
		mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nlink: InputMaybe<IntQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		prettySize: InputMaybe<StringQueryOperatorInput>;
		rdev: InputMaybe<IntQueryOperatorInput>;
		relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		relativePath: InputMaybe<StringQueryOperatorInput>;
		root: InputMaybe<StringQueryOperatorInput>;
		size: InputMaybe<IntQueryOperatorInput>;
		sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		uid: InputMaybe<IntQueryOperatorInput>;
	};

	type Query_fileArgs = {
		absolutePath: InputMaybe<StringQueryOperatorInput>;
		accessTime: InputMaybe<DateQueryOperatorInput>;
		atime: InputMaybe<DateQueryOperatorInput>;
		atimeMs: InputMaybe<FloatQueryOperatorInput>;
		base: InputMaybe<StringQueryOperatorInput>;
		birthTime: InputMaybe<DateQueryOperatorInput>;
		birthtime: InputMaybe<DateQueryOperatorInput>;
		birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
		blksize: InputMaybe<IntQueryOperatorInput>;
		blocks: InputMaybe<IntQueryOperatorInput>;
		changeTime: InputMaybe<DateQueryOperatorInput>;
		childImageSharp: InputMaybe<ImageSharpFilterInput>;
		children: InputMaybe<NodeFilterListInput>;
		childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
		ctime: InputMaybe<DateQueryOperatorInput>;
		ctimeMs: InputMaybe<FloatQueryOperatorInput>;
		dev: InputMaybe<IntQueryOperatorInput>;
		dir: InputMaybe<StringQueryOperatorInput>;
		ext: InputMaybe<StringQueryOperatorInput>;
		extension: InputMaybe<StringQueryOperatorInput>;
		gid: InputMaybe<IntQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		ino: InputMaybe<FloatQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		mode: InputMaybe<IntQueryOperatorInput>;
		modifiedTime: InputMaybe<DateQueryOperatorInput>;
		mtime: InputMaybe<DateQueryOperatorInput>;
		mtimeMs: InputMaybe<FloatQueryOperatorInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nlink: InputMaybe<IntQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		prettySize: InputMaybe<StringQueryOperatorInput>;
		publicURL: InputMaybe<StringQueryOperatorInput>;
		rdev: InputMaybe<IntQueryOperatorInput>;
		relativeDirectory: InputMaybe<StringQueryOperatorInput>;
		relativePath: InputMaybe<StringQueryOperatorInput>;
		root: InputMaybe<StringQueryOperatorInput>;
		size: InputMaybe<IntQueryOperatorInput>;
		sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
		uid: InputMaybe<IntQueryOperatorInput>;
	};

	type Query_imageSharpArgs = {
		children: InputMaybe<NodeFilterListInput>;
		fixed: InputMaybe<ImageSharpFixedFilterInput>;
		fluid: InputMaybe<ImageSharpFluidFilterInput>;
		gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		original: InputMaybe<ImageSharpOriginalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		resize: InputMaybe<ImageSharpResizeFilterInput>;
	};

	type Query_markdownRemarkArgs = {
		children: InputMaybe<NodeFilterListInput>;
		excerpt: InputMaybe<StringQueryOperatorInput>;
		excerptAst: InputMaybe<JSONQueryOperatorInput>;
		frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
		headings: InputMaybe<MarkdownHeadingFilterListInput>;
		html: InputMaybe<StringQueryOperatorInput>;
		htmlAst: InputMaybe<JSONQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
		rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
		tableOfContents: InputMaybe<StringQueryOperatorInput>;
		timeToRead: InputMaybe<IntQueryOperatorInput>;
		wordCount: InputMaybe<MarkdownWordCountFilterInput>;
	};

	type Query_siteArgs = {
		buildTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
		host: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		jsxRuntime: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pathPrefix: InputMaybe<StringQueryOperatorInput>;
		polyfill: InputMaybe<BooleanQueryOperatorInput>;
		port: InputMaybe<IntQueryOperatorInput>;
		siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
		trailingSlash: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_siteBuildMetadataArgs = {
		buildTime: InputMaybe<DateQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		parent: InputMaybe<NodeFilterInput>;
	};

	type Query_siteFunctionArgs = {
		absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		functionRoute: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		matchPath: InputMaybe<StringQueryOperatorInput>;
		originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
		originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pluginName: InputMaybe<StringQueryOperatorInput>;
		relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
	};

	type Query_sitePageArgs = {
		children: InputMaybe<NodeFilterListInput>;
		component: InputMaybe<StringQueryOperatorInput>;
		componentChunkName: InputMaybe<StringQueryOperatorInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		internalComponentName: InputMaybe<StringQueryOperatorInput>;
		matchPath: InputMaybe<StringQueryOperatorInput>;
		pageContext: InputMaybe<JSONQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		path: InputMaybe<StringQueryOperatorInput>;
		pluginCreator: InputMaybe<SitePluginFilterInput>;
	};

	type Query_sitePluginArgs = {
		browserAPIs: InputMaybe<StringQueryOperatorInput>;
		children: InputMaybe<NodeFilterListInput>;
		id: InputMaybe<StringQueryOperatorInput>;
		internal: InputMaybe<InternalFilterInput>;
		name: InputMaybe<StringQueryOperatorInput>;
		nodeAPIs: InputMaybe<StringQueryOperatorInput>;
		packageJson: InputMaybe<JSONQueryOperatorInput>;
		parent: InputMaybe<NodeFilterInput>;
		pluginFilepath: InputMaybe<StringQueryOperatorInput>;
		pluginOptions: InputMaybe<JSONQueryOperatorInput>;
		resolve: InputMaybe<StringQueryOperatorInput>;
		ssrAPIs: InputMaybe<StringQueryOperatorInput>;
		version: InputMaybe<StringQueryOperatorInput>;
	};

	/** Remote Interface */
	type RemoteFile = {
		readonly filename: Scalars['String'];
		readonly filesize: Maybe<Scalars['Int']>;
		/** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
		readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
		readonly height: Maybe<Scalars['Int']>;
		readonly id: Scalars['ID'];
		readonly mimeType: Scalars['String'];
		readonly publicUrl: Scalars['String'];
		readonly resize: Maybe<RemoteFileResize>;
		readonly width: Maybe<Scalars['Int']>;
	};

	/** Remote Interface */
	type RemoteFile_gatsbyImageArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		backgroundColor: InputMaybe<Scalars['String']>;
		breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
		height: InputMaybe<Scalars['Int']>;
		layout?: InputMaybe<RemoteFileLayout>;
		outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
		placeholder?: InputMaybe<RemoteFilePlaceholder>;
		quality?: InputMaybe<Scalars['Int']>;
		sizes: InputMaybe<Scalars['String']>;
		width: InputMaybe<Scalars['Int']>;
	};

	/** Remote Interface */
	type RemoteFile_resizeArgs = {
		aspectRatio: InputMaybe<Scalars['Float']>;
		cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
		fit?: InputMaybe<RemoteFileFit>;
		format?: InputMaybe<RemoteFileFormat>;
		height: InputMaybe<Scalars['Int']>;
		quality?: InputMaybe<Scalars['Int']>;
		width: InputMaybe<Scalars['Int']>;
	};

	type RemoteFileCropFocus = 'bottom' | 'center' | 'edges' | 'entropy' | 'faces' | 'left' | 'right' | 'top';

	type RemoteFileFit = 'contain' | 'cover' | 'fill' | 'outside';

	type RemoteFileFormat = 'auto' | 'avif' | 'jpg' | 'png' | 'webp';

	type RemoteFileLayout = 'constrained' | 'fixed' | 'fullWidth';

	type RemoteFilePlaceholder = 'blurred' | 'dominantColor' | 'none' | 'tracedSVG';

	type RemoteFileResize = {
		readonly height: Maybe<Scalars['Int']>;
		readonly src: Maybe<Scalars['String']>;
		readonly width: Maybe<Scalars['Int']>;
	};

	type RemoteFileResizeFieldSelector = {
		readonly height: InputMaybe<FieldSelectorEnum>;
		readonly src: InputMaybe<FieldSelectorEnum>;
		readonly width: InputMaybe<FieldSelectorEnum>;
	};

	type RemoteFileResizeFilterInput = {
		readonly height: InputMaybe<IntQueryOperatorInput>;
		readonly src: InputMaybe<StringQueryOperatorInput>;
		readonly width: InputMaybe<IntQueryOperatorInput>;
	};

	type RemoteFileResizeSortInput = {
		readonly height: InputMaybe<SortOrderEnum>;
		readonly src: InputMaybe<SortOrderEnum>;
		readonly width: InputMaybe<SortOrderEnum>;
	};

	type Site = Node & {
		readonly buildTime: Maybe<Scalars['Date']>;
		readonly children: ReadonlyArray<Node>;
		readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
		readonly host: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly jsxRuntime: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		readonly pathPrefix: Maybe<Scalars['String']>;
		readonly polyfill: Maybe<Scalars['Boolean']>;
		readonly port: Maybe<Scalars['Int']>;
		readonly siteMetadata: Maybe<SiteSiteMetadata>;
		readonly trailingSlash: Maybe<Scalars['String']>;
	};

	type Site_buildTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type SiteBuildMetadata = Node & {
		readonly buildTime: Maybe<Scalars['Date']>;
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
	};

	type SiteBuildMetadata_buildTimeArgs = {
		difference: InputMaybe<Scalars['String']>;
		formatString: InputMaybe<Scalars['String']>;
		fromNow: InputMaybe<Scalars['Boolean']>;
		locale: InputMaybe<Scalars['String']>;
	};

	type SiteBuildMetadataConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
		readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SiteBuildMetadata>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteBuildMetadataConnection_distinctArgs = {
		field: SiteBuildMetadataFieldSelector;
	};

	type SiteBuildMetadataConnection_groupArgs = {
		field: SiteBuildMetadataFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteBuildMetadataConnection_maxArgs = {
		field: SiteBuildMetadataFieldSelector;
	};

	type SiteBuildMetadataConnection_minArgs = {
		field: SiteBuildMetadataFieldSelector;
	};

	type SiteBuildMetadataConnection_sumArgs = {
		field: SiteBuildMetadataFieldSelector;
	};

	type SiteBuildMetadataEdge = {
		readonly next: Maybe<SiteBuildMetadata>;
		readonly node: SiteBuildMetadata;
		readonly previous: Maybe<SiteBuildMetadata>;
	};

	type SiteBuildMetadataFieldSelector = {
		readonly buildTime: InputMaybe<FieldSelectorEnum>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
	};

	type SiteBuildMetadataFilterInput = {
		readonly buildTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
	};

	type SiteBuildMetadataGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SiteBuildMetadata>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteBuildMetadataGroupConnection_distinctArgs = {
		field: SiteBuildMetadataFieldSelector;
	};

	type SiteBuildMetadataGroupConnection_groupArgs = {
		field: SiteBuildMetadataFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteBuildMetadataGroupConnection_maxArgs = {
		field: SiteBuildMetadataFieldSelector;
	};

	type SiteBuildMetadataGroupConnection_minArgs = {
		field: SiteBuildMetadataFieldSelector;
	};

	type SiteBuildMetadataGroupConnection_sumArgs = {
		field: SiteBuildMetadataFieldSelector;
	};

	type SiteBuildMetadataSortInput = {
		readonly buildTime: InputMaybe<SortOrderEnum>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
	};

	type SiteConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteEdge>;
		readonly group: ReadonlyArray<SiteGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Site>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteConnection_distinctArgs = {
		field: SiteFieldSelector;
	};

	type SiteConnection_groupArgs = {
		field: SiteFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteConnection_maxArgs = {
		field: SiteFieldSelector;
	};

	type SiteConnection_minArgs = {
		field: SiteFieldSelector;
	};

	type SiteConnection_sumArgs = {
		field: SiteFieldSelector;
	};

	type SiteEdge = {
		readonly next: Maybe<Site>;
		readonly node: Site;
		readonly previous: Maybe<Site>;
	};

	type SiteFieldSelector = {
		readonly buildTime: InputMaybe<FieldSelectorEnum>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
		readonly host: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
		readonly polyfill: InputMaybe<FieldSelectorEnum>;
		readonly port: InputMaybe<FieldSelectorEnum>;
		readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
		readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
	};

	type SiteFilterInput = {
		readonly buildTime: InputMaybe<DateQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
		readonly host: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
		readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
		readonly port: InputMaybe<IntQueryOperatorInput>;
		readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
		readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteFunction = Node & {
		readonly absoluteCompiledFilePath: Scalars['String'];
		readonly children: ReadonlyArray<Node>;
		readonly functionRoute: Scalars['String'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly matchPath: Maybe<Scalars['String']>;
		readonly originalAbsoluteFilePath: Scalars['String'];
		readonly originalRelativeFilePath: Scalars['String'];
		readonly parent: Maybe<Node>;
		readonly pluginName: Scalars['String'];
		readonly relativeCompiledFilePath: Scalars['String'];
	};

	type SiteFunctionConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteFunctionEdge>;
		readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SiteFunction>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteFunctionConnection_distinctArgs = {
		field: SiteFunctionFieldSelector;
	};

	type SiteFunctionConnection_groupArgs = {
		field: SiteFunctionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteFunctionConnection_maxArgs = {
		field: SiteFunctionFieldSelector;
	};

	type SiteFunctionConnection_minArgs = {
		field: SiteFunctionFieldSelector;
	};

	type SiteFunctionConnection_sumArgs = {
		field: SiteFunctionFieldSelector;
	};

	type SiteFunctionEdge = {
		readonly next: Maybe<SiteFunction>;
		readonly node: SiteFunction;
		readonly previous: Maybe<SiteFunction>;
	};

	type SiteFunctionFieldSelector = {
		readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly functionRoute: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly matchPath: InputMaybe<FieldSelectorEnum>;
		readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
		readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly pluginName: InputMaybe<FieldSelectorEnum>;
		readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
	};

	type SiteFunctionFilterInput = {
		readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly matchPath: InputMaybe<StringQueryOperatorInput>;
		readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pluginName: InputMaybe<StringQueryOperatorInput>;
		readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteFunctionGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteFunctionEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SiteFunction>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteFunctionGroupConnection_distinctArgs = {
		field: SiteFunctionFieldSelector;
	};

	type SiteFunctionGroupConnection_groupArgs = {
		field: SiteFunctionFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteFunctionGroupConnection_maxArgs = {
		field: SiteFunctionFieldSelector;
	};

	type SiteFunctionGroupConnection_minArgs = {
		field: SiteFunctionFieldSelector;
	};

	type SiteFunctionGroupConnection_sumArgs = {
		field: SiteFunctionFieldSelector;
	};

	type SiteFunctionSortInput = {
		readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly functionRoute: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly matchPath: InputMaybe<SortOrderEnum>;
		readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
		readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly pluginName: InputMaybe<SortOrderEnum>;
		readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
	};

	type SiteGraphqlTypegen = {
		readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly generateOnBuild: Maybe<Scalars['Boolean']>;
		readonly typesOutputPath: Maybe<Scalars['String']>;
	};

	type SiteGraphqlTypegenFieldSelector = {
		readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
		readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
		readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
	};

	type SiteGraphqlTypegenFilterInput = {
		readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
		readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
		readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteGraphqlTypegenSortInput = {
		readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
		readonly generateOnBuild: InputMaybe<SortOrderEnum>;
		readonly typesOutputPath: InputMaybe<SortOrderEnum>;
	};

	type SiteGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SiteEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SiteGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<Site>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SiteGroupConnection_distinctArgs = {
		field: SiteFieldSelector;
	};

	type SiteGroupConnection_groupArgs = {
		field: SiteFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SiteGroupConnection_maxArgs = {
		field: SiteFieldSelector;
	};

	type SiteGroupConnection_minArgs = {
		field: SiteFieldSelector;
	};

	type SiteGroupConnection_sumArgs = {
		field: SiteFieldSelector;
	};

	type SitePage = Node & {
		readonly children: ReadonlyArray<Node>;
		readonly component: Scalars['String'];
		readonly componentChunkName: Scalars['String'];
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly internalComponentName: Scalars['String'];
		readonly matchPath: Maybe<Scalars['String']>;
		readonly pageContext: Maybe<Scalars['JSON']>;
		readonly parent: Maybe<Node>;
		readonly path: Scalars['String'];
		readonly pluginCreator: Maybe<SitePlugin>;
	};

	type SitePageConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SitePageEdge>;
		readonly group: ReadonlyArray<SitePageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SitePage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SitePageConnection_distinctArgs = {
		field: SitePageFieldSelector;
	};

	type SitePageConnection_groupArgs = {
		field: SitePageFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SitePageConnection_maxArgs = {
		field: SitePageFieldSelector;
	};

	type SitePageConnection_minArgs = {
		field: SitePageFieldSelector;
	};

	type SitePageConnection_sumArgs = {
		field: SitePageFieldSelector;
	};

	type SitePageEdge = {
		readonly next: Maybe<SitePage>;
		readonly node: SitePage;
		readonly previous: Maybe<SitePage>;
	};

	type SitePageFieldSelector = {
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly component: InputMaybe<FieldSelectorEnum>;
		readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
		readonly matchPath: InputMaybe<FieldSelectorEnum>;
		readonly pageContext: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly path: InputMaybe<FieldSelectorEnum>;
		readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
	};

	type SitePageFilterInput = {
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly component: InputMaybe<StringQueryOperatorInput>;
		readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
		readonly matchPath: InputMaybe<StringQueryOperatorInput>;
		readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly path: InputMaybe<StringQueryOperatorInput>;
		readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
	};

	type SitePageGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SitePageEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SitePageGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SitePage>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SitePageGroupConnection_distinctArgs = {
		field: SitePageFieldSelector;
	};

	type SitePageGroupConnection_groupArgs = {
		field: SitePageFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SitePageGroupConnection_maxArgs = {
		field: SitePageFieldSelector;
	};

	type SitePageGroupConnection_minArgs = {
		field: SitePageFieldSelector;
	};

	type SitePageGroupConnection_sumArgs = {
		field: SitePageFieldSelector;
	};

	type SitePageSortInput = {
		readonly children: InputMaybe<NodeSortInput>;
		readonly component: InputMaybe<SortOrderEnum>;
		readonly componentChunkName: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly internalComponentName: InputMaybe<SortOrderEnum>;
		readonly matchPath: InputMaybe<SortOrderEnum>;
		readonly pageContext: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly path: InputMaybe<SortOrderEnum>;
		readonly pluginCreator: InputMaybe<SitePluginSortInput>;
	};

	type SitePlugin = Node & {
		readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly children: ReadonlyArray<Node>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly name: Maybe<Scalars['String']>;
		readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly packageJson: Maybe<Scalars['JSON']>;
		readonly parent: Maybe<Node>;
		readonly pluginFilepath: Maybe<Scalars['String']>;
		readonly pluginOptions: Maybe<Scalars['JSON']>;
		readonly resolve: Maybe<Scalars['String']>;
		readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
		readonly version: Maybe<Scalars['String']>;
	};

	type SitePluginConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SitePluginEdge>;
		readonly group: ReadonlyArray<SitePluginGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SitePlugin>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SitePluginConnection_distinctArgs = {
		field: SitePluginFieldSelector;
	};

	type SitePluginConnection_groupArgs = {
		field: SitePluginFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SitePluginConnection_maxArgs = {
		field: SitePluginFieldSelector;
	};

	type SitePluginConnection_minArgs = {
		field: SitePluginFieldSelector;
	};

	type SitePluginConnection_sumArgs = {
		field: SitePluginFieldSelector;
	};

	type SitePluginEdge = {
		readonly next: Maybe<SitePlugin>;
		readonly node: SitePlugin;
		readonly previous: Maybe<SitePlugin>;
	};

	type SitePluginFieldSelector = {
		readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly name: InputMaybe<FieldSelectorEnum>;
		readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
		readonly packageJson: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
		readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
		readonly resolve: InputMaybe<FieldSelectorEnum>;
		readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
		readonly version: InputMaybe<FieldSelectorEnum>;
	};

	type SitePluginFilterInput = {
		readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly name: InputMaybe<StringQueryOperatorInput>;
		readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
		readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
		readonly resolve: InputMaybe<StringQueryOperatorInput>;
		readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
		readonly version: InputMaybe<StringQueryOperatorInput>;
	};

	type SitePluginGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<SitePluginEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<SitePluginGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<SitePlugin>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type SitePluginGroupConnection_distinctArgs = {
		field: SitePluginFieldSelector;
	};

	type SitePluginGroupConnection_groupArgs = {
		field: SitePluginFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type SitePluginGroupConnection_maxArgs = {
		field: SitePluginFieldSelector;
	};

	type SitePluginGroupConnection_minArgs = {
		field: SitePluginFieldSelector;
	};

	type SitePluginGroupConnection_sumArgs = {
		field: SitePluginFieldSelector;
	};

	type SitePluginSortInput = {
		readonly browserAPIs: InputMaybe<SortOrderEnum>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly name: InputMaybe<SortOrderEnum>;
		readonly nodeAPIs: InputMaybe<SortOrderEnum>;
		readonly packageJson: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly pluginFilepath: InputMaybe<SortOrderEnum>;
		readonly pluginOptions: InputMaybe<SortOrderEnum>;
		readonly resolve: InputMaybe<SortOrderEnum>;
		readonly ssrAPIs: InputMaybe<SortOrderEnum>;
		readonly version: InputMaybe<SortOrderEnum>;
	};

	type SiteSiteMetadata = {
		readonly author: Maybe<Scalars['String']>;
		readonly description: Maybe<Scalars['String']>;
		readonly siteUrl: Maybe<Scalars['String']>;
		readonly title: Maybe<Scalars['String']>;
	};

	type SiteSiteMetadataFieldSelector = {
		readonly author: InputMaybe<FieldSelectorEnum>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly siteUrl: InputMaybe<FieldSelectorEnum>;
		readonly title: InputMaybe<FieldSelectorEnum>;
	};

	type SiteSiteMetadataFilterInput = {
		readonly author: InputMaybe<StringQueryOperatorInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
	};

	type SiteSiteMetadataSortInput = {
		readonly author: InputMaybe<SortOrderEnum>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly siteUrl: InputMaybe<SortOrderEnum>;
		readonly title: InputMaybe<SortOrderEnum>;
	};

	type SiteSortInput = {
		readonly buildTime: InputMaybe<SortOrderEnum>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
		readonly host: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly jsxRuntime: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly pathPrefix: InputMaybe<SortOrderEnum>;
		readonly polyfill: InputMaybe<SortOrderEnum>;
		readonly port: InputMaybe<SortOrderEnum>;
		readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
		readonly trailingSlash: InputMaybe<SortOrderEnum>;
	};

	type SortOrderEnum = 'ASC' | 'DESC';

	type StringQueryOperatorInput = {
		readonly eq: InputMaybe<Scalars['String']>;
		readonly glob: InputMaybe<Scalars['String']>;
		readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
		readonly ne: InputMaybe<Scalars['String']>;
		readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
		readonly regex: InputMaybe<Scalars['String']>;
	};

	type TransformOptions = {
		readonly cropFocus: InputMaybe<ImageCropFocus>;
		readonly duotone: InputMaybe<DuotoneGradient>;
		readonly fit: InputMaybe<ImageFit>;
		readonly grayscale: InputMaybe<Scalars['Boolean']>;
		readonly rotate: InputMaybe<Scalars['Int']>;
		readonly trim: InputMaybe<Scalars['Float']>;
	};

	type WebPOptions = {
		readonly quality: InputMaybe<Scalars['Int']>;
	};

	type contentfulBannerSectionDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulBannerSectionDescriptionTextNodeSys>;
	};

	type contentfulBannerSectionDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulBannerSectionDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulBannerSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulBannerSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulBannerSectionDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBannerSectionDescriptionTextNodeConnection_groupArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulBannerSectionDescriptionTextNodeConnection_maxArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBannerSectionDescriptionTextNodeConnection_minArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBannerSectionDescriptionTextNodeConnection_sumArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBannerSectionDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulBannerSectionDescriptionTextNode>;
		readonly node: contentfulBannerSectionDescriptionTextNode;
		readonly previous: Maybe<contentfulBannerSectionDescriptionTextNode>;
	};

	type contentfulBannerSectionDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulBannerSectionDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulBannerSectionDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulBannerSectionDescriptionTextNodeSysFilterInput>;
	};

	type contentfulBannerSectionDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulBannerSectionDescriptionTextNodeFilterInput>;
	};

	type contentfulBannerSectionDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulBannerSectionDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulBannerSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulBannerSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulBannerSectionDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBannerSectionDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulBannerSectionDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBannerSectionDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBannerSectionDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulBannerSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBannerSectionDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulBannerSectionDescriptionTextNodeSysSortInput>;
	};

	type contentfulBannerSectionDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulBannerSectionDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulBannerSectionDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulBannerSectionDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulBannerSectionRichTitleTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly rich_title: Maybe<Scalars['String']>;
		readonly sys: Maybe<contentfulBannerSectionRichTitleTextNodeSys>;
	};

	type contentfulBannerSectionRichTitleTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulBannerSectionRichTitleTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulBannerSectionRichTitleTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulBannerSectionRichTitleTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulBannerSectionRichTitleTextNodeConnection_distinctArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
	};

	type contentfulBannerSectionRichTitleTextNodeConnection_groupArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulBannerSectionRichTitleTextNodeConnection_maxArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
	};

	type contentfulBannerSectionRichTitleTextNodeConnection_minArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
	};

	type contentfulBannerSectionRichTitleTextNodeConnection_sumArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
	};

	type contentfulBannerSectionRichTitleTextNodeEdge = {
		readonly next: Maybe<contentfulBannerSectionRichTitleTextNode>;
		readonly node: contentfulBannerSectionRichTitleTextNode;
		readonly previous: Maybe<contentfulBannerSectionRichTitleTextNode>;
	};

	type contentfulBannerSectionRichTitleTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly rich_title: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<contentfulBannerSectionRichTitleTextNodeSysFieldSelector>;
	};

	type contentfulBannerSectionRichTitleTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly rich_title: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<contentfulBannerSectionRichTitleTextNodeSysFilterInput>;
	};

	type contentfulBannerSectionRichTitleTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulBannerSectionRichTitleTextNodeFilterInput>;
	};

	type contentfulBannerSectionRichTitleTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulBannerSectionRichTitleTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulBannerSectionRichTitleTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulBannerSectionRichTitleTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulBannerSectionRichTitleTextNodeGroupConnection_distinctArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
	};

	type contentfulBannerSectionRichTitleTextNodeGroupConnection_groupArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulBannerSectionRichTitleTextNodeGroupConnection_maxArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
	};

	type contentfulBannerSectionRichTitleTextNodeGroupConnection_minArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
	};

	type contentfulBannerSectionRichTitleTextNodeGroupConnection_sumArgs = {
		field: contentfulBannerSectionRichTitleTextNodeFieldSelector;
	};

	type contentfulBannerSectionRichTitleTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly rich_title: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<contentfulBannerSectionRichTitleTextNodeSysSortInput>;
	};

	type contentfulBannerSectionRichTitleTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulBannerSectionRichTitleTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulBannerSectionRichTitleTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulBannerSectionRichTitleTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulBlogDetailsSectionDescriptionTextNodeSys>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulBlogDetailsSectionDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulBlogDetailsSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulBlogDetailsSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeConnection_groupArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeConnection_maxArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeConnection_minArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeConnection_sumArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulBlogDetailsSectionDescriptionTextNode>;
		readonly node: contentfulBlogDetailsSectionDescriptionTextNode;
		readonly previous: Maybe<contentfulBlogDetailsSectionDescriptionTextNode>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeSysFilterInput>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeFilterInput>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulBlogDetailsSectionDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulBlogDetailsSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulBlogDetailsSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulBlogDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulBlogDetailsSectionDescriptionTextNodeSysSortInput>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulBlogDetailsSectionDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulCardLongDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly long_description: Maybe<Scalars['String']>;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulCardLongDescriptionTextNodeSys>;
	};

	type contentfulCardLongDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulCardLongDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulCardLongDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulCardLongDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulCardLongDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
	};

	type contentfulCardLongDescriptionTextNodeConnection_groupArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulCardLongDescriptionTextNodeConnection_maxArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
	};

	type contentfulCardLongDescriptionTextNodeConnection_minArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
	};

	type contentfulCardLongDescriptionTextNodeConnection_sumArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
	};

	type contentfulCardLongDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulCardLongDescriptionTextNode>;
		readonly node: contentfulCardLongDescriptionTextNode;
		readonly previous: Maybe<contentfulCardLongDescriptionTextNode>;
	};

	type contentfulCardLongDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly long_description: InputMaybe<FieldSelectorEnum>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulCardLongDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulCardLongDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly long_description: InputMaybe<StringQueryOperatorInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulCardLongDescriptionTextNodeSysFilterInput>;
	};

	type contentfulCardLongDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulCardLongDescriptionTextNodeFilterInput>;
	};

	type contentfulCardLongDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulCardLongDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulCardLongDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulCardLongDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulCardLongDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
	};

	type contentfulCardLongDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulCardLongDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
	};

	type contentfulCardLongDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
	};

	type contentfulCardLongDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulCardLongDescriptionTextNodeFieldSelector;
	};

	type contentfulCardLongDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly long_description: InputMaybe<SortOrderEnum>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulCardLongDescriptionTextNodeSysSortInput>;
	};

	type contentfulCardLongDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulCardLongDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulCardLongDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulCardLongDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulCardSectionRichDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly rich_description: Maybe<Scalars['String']>;
		readonly sys: Maybe<contentfulCardSectionRichDescriptionTextNodeSys>;
	};

	type contentfulCardSectionRichDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulCardSectionRichDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulCardSectionRichDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulCardSectionRichDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulCardSectionRichDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
	};

	type contentfulCardSectionRichDescriptionTextNodeConnection_groupArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulCardSectionRichDescriptionTextNodeConnection_maxArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
	};

	type contentfulCardSectionRichDescriptionTextNodeConnection_minArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
	};

	type contentfulCardSectionRichDescriptionTextNodeConnection_sumArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
	};

	type contentfulCardSectionRichDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulCardSectionRichDescriptionTextNode>;
		readonly node: contentfulCardSectionRichDescriptionTextNode;
		readonly previous: Maybe<contentfulCardSectionRichDescriptionTextNode>;
	};

	type contentfulCardSectionRichDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly rich_description: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<contentfulCardSectionRichDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulCardSectionRichDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly rich_description: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<contentfulCardSectionRichDescriptionTextNodeSysFilterInput>;
	};

	type contentfulCardSectionRichDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulCardSectionRichDescriptionTextNodeFilterInput>;
	};

	type contentfulCardSectionRichDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulCardSectionRichDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulCardSectionRichDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulCardSectionRichDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulCardSectionRichDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
	};

	type contentfulCardSectionRichDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulCardSectionRichDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
	};

	type contentfulCardSectionRichDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
	};

	type contentfulCardSectionRichDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulCardSectionRichDescriptionTextNodeFieldSelector;
	};

	type contentfulCardSectionRichDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly rich_description: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<contentfulCardSectionRichDescriptionTextNodeSysSortInput>;
	};

	type contentfulCardSectionRichDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulCardSectionRichDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulCardSectionRichDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulCardSectionRichDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulDividedSectionDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulDividedSectionDescriptionTextNodeSys>;
	};

	type contentfulDividedSectionDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulDividedSectionDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulDividedSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulDividedSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulDividedSectionDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulDividedSectionDescriptionTextNodeConnection_groupArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulDividedSectionDescriptionTextNodeConnection_maxArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulDividedSectionDescriptionTextNodeConnection_minArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulDividedSectionDescriptionTextNodeConnection_sumArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulDividedSectionDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulDividedSectionDescriptionTextNode>;
		readonly node: contentfulDividedSectionDescriptionTextNode;
		readonly previous: Maybe<contentfulDividedSectionDescriptionTextNode>;
	};

	type contentfulDividedSectionDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulDividedSectionDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulDividedSectionDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulDividedSectionDescriptionTextNodeSysFilterInput>;
	};

	type contentfulDividedSectionDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulDividedSectionDescriptionTextNodeFilterInput>;
	};

	type contentfulDividedSectionDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulDividedSectionDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulDividedSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulDividedSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulDividedSectionDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulDividedSectionDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulDividedSectionDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulDividedSectionDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulDividedSectionDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulDividedSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulDividedSectionDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulDividedSectionDescriptionTextNodeSysSortInput>;
	};

	type contentfulDividedSectionDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulDividedSectionDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulDividedSectionDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulDividedSectionDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulDividedSectionTitleTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulDividedSectionTitleTextNodeSys>;
		readonly title: Maybe<Scalars['String']>;
	};

	type contentfulDividedSectionTitleTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulDividedSectionTitleTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulDividedSectionTitleTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulDividedSectionTitleTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulDividedSectionTitleTextNodeConnection_distinctArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
	};

	type contentfulDividedSectionTitleTextNodeConnection_groupArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulDividedSectionTitleTextNodeConnection_maxArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
	};

	type contentfulDividedSectionTitleTextNodeConnection_minArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
	};

	type contentfulDividedSectionTitleTextNodeConnection_sumArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
	};

	type contentfulDividedSectionTitleTextNodeEdge = {
		readonly next: Maybe<contentfulDividedSectionTitleTextNode>;
		readonly node: contentfulDividedSectionTitleTextNode;
		readonly previous: Maybe<contentfulDividedSectionTitleTextNode>;
	};

	type contentfulDividedSectionTitleTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulDividedSectionTitleTextNodeSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulDividedSectionTitleTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulDividedSectionTitleTextNodeSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulDividedSectionTitleTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulDividedSectionTitleTextNodeFilterInput>;
	};

	type contentfulDividedSectionTitleTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulDividedSectionTitleTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulDividedSectionTitleTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulDividedSectionTitleTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulDividedSectionTitleTextNodeGroupConnection_distinctArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
	};

	type contentfulDividedSectionTitleTextNodeGroupConnection_groupArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulDividedSectionTitleTextNodeGroupConnection_maxArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
	};

	type contentfulDividedSectionTitleTextNodeGroupConnection_minArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
	};

	type contentfulDividedSectionTitleTextNodeGroupConnection_sumArgs = {
		field: contentfulDividedSectionTitleTextNodeFieldSelector;
	};

	type contentfulDividedSectionTitleTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulDividedSectionTitleTextNodeSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
	};

	type contentfulDividedSectionTitleTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulDividedSectionTitleTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulDividedSectionTitleTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulDividedSectionTitleTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSys>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulFeaturesDetailsSectionDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulFeaturesDetailsSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulFeaturesDetailsSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeConnection_groupArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeConnection_maxArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeConnection_minArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeConnection_sumArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulFeaturesDetailsSectionDescriptionTextNode>;
		readonly node: contentfulFeaturesDetailsSectionDescriptionTextNode;
		readonly previous: Maybe<contentfulFeaturesDetailsSectionDescriptionTextNode>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSysFilterInput>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeFilterInput>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulFeaturesDetailsSectionDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulFeaturesDetailsSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulFeaturesDetailsSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulFeaturesDetailsSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulFeaturesDetailsSectionDescriptionTextNodeSysSortInput>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulFeaturesDetailsSectionDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSys>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulFooterDetailsPageSectionDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulFooterDetailsPageSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulFooterDetailsPageSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeConnection_groupArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeConnection_maxArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeConnection_minArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeConnection_sumArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulFooterDetailsPageSectionDescriptionTextNode>;
		readonly node: contentfulFooterDetailsPageSectionDescriptionTextNode;
		readonly previous: Maybe<contentfulFooterDetailsPageSectionDescriptionTextNode>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSysFilterInput>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeFilterInput>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulFooterDetailsPageSectionDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulFooterDetailsPageSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulFooterDetailsPageSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulFooterDetailsPageSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulFooterDetailsPageSectionDescriptionTextNodeSysSortInput>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulFooterDetailsPageSectionDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulPlanFeatureDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulPlanFeatureDescriptionTextNodeSys>;
	};

	type contentfulPlanFeatureDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlanFeatureDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulPlanFeatureDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlanFeatureDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlanFeatureDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureDescriptionTextNodeConnection_groupArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlanFeatureDescriptionTextNodeConnection_maxArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureDescriptionTextNodeConnection_minArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureDescriptionTextNodeConnection_sumArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulPlanFeatureDescriptionTextNode>;
		readonly node: contentfulPlanFeatureDescriptionTextNode;
		readonly previous: Maybe<contentfulPlanFeatureDescriptionTextNode>;
	};

	type contentfulPlanFeatureDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulPlanFeatureDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulPlanFeatureDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulPlanFeatureDescriptionTextNodeSysFilterInput>;
	};

	type contentfulPlanFeatureDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulPlanFeatureDescriptionTextNodeFilterInput>;
	};

	type contentfulPlanFeatureDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlanFeatureDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulPlanFeatureDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlanFeatureDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlanFeatureDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlanFeatureDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulPlanFeatureDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulPlanFeatureDescriptionTextNodeSysSortInput>;
	};

	type contentfulPlanFeatureDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulPlanFeatureDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulPlanFeatureDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulPlanFeatureDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulPlanFeatureSectionDescriptionTextNodeSys>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlanFeatureSectionDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulPlanFeatureSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlanFeatureSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeConnection_groupArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeConnection_maxArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeConnection_minArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeConnection_sumArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulPlanFeatureSectionDescriptionTextNode>;
		readonly node: contentfulPlanFeatureSectionDescriptionTextNode;
		readonly previous: Maybe<contentfulPlanFeatureSectionDescriptionTextNode>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeSysFilterInput>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeFilterInput>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlanFeatureSectionDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulPlanFeatureSectionDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlanFeatureSectionDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulPlanFeatureSectionDescriptionTextNodeFieldSelector;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulPlanFeatureSectionDescriptionTextNodeSysSortInput>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulPlanFeatureSectionDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulPlansSectionSubDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sub_description: Maybe<Scalars['String']>;
		readonly sys: Maybe<contentfulPlansSectionSubDescriptionTextNodeSys>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlansSectionSubDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulPlansSectionSubDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlansSectionSubDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlansSectionSubDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubDescriptionTextNodeConnection_groupArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeConnection_maxArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubDescriptionTextNodeConnection_minArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubDescriptionTextNodeConnection_sumArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulPlansSectionSubDescriptionTextNode>;
		readonly node: contentfulPlansSectionSubDescriptionTextNode;
		readonly previous: Maybe<contentfulPlansSectionSubDescriptionTextNode>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sub_description: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sub_description: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeSysFilterInput>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeFilterInput>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlansSectionSubDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulPlansSectionSubDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlansSectionSubDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlansSectionSubDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulPlansSectionSubDescriptionTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sub_description: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<contentfulPlansSectionSubDescriptionTextNodeSysSortInput>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulPlansSectionSubDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulPlansSectionSubTitleTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sub_title: Maybe<Scalars['String']>;
		readonly sys: Maybe<contentfulPlansSectionSubTitleTextNodeSys>;
	};

	type contentfulPlansSectionSubTitleTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlansSectionSubTitleTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulPlansSectionSubTitleTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlansSectionSubTitleTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlansSectionSubTitleTextNodeConnection_distinctArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubTitleTextNodeConnection_groupArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlansSectionSubTitleTextNodeConnection_maxArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubTitleTextNodeConnection_minArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubTitleTextNodeConnection_sumArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubTitleTextNodeEdge = {
		readonly next: Maybe<contentfulPlansSectionSubTitleTextNode>;
		readonly node: contentfulPlansSectionSubTitleTextNode;
		readonly previous: Maybe<contentfulPlansSectionSubTitleTextNode>;
	};

	type contentfulPlansSectionSubTitleTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sub_title: InputMaybe<FieldSelectorEnum>;
		readonly sys: InputMaybe<contentfulPlansSectionSubTitleTextNodeSysFieldSelector>;
	};

	type contentfulPlansSectionSubTitleTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sub_title: InputMaybe<StringQueryOperatorInput>;
		readonly sys: InputMaybe<contentfulPlansSectionSubTitleTextNodeSysFilterInput>;
	};

	type contentfulPlansSectionSubTitleTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulPlansSectionSubTitleTextNodeFilterInput>;
	};

	type contentfulPlansSectionSubTitleTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlansSectionSubTitleTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulPlansSectionSubTitleTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlansSectionSubTitleTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlansSectionSubTitleTextNodeGroupConnection_distinctArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubTitleTextNodeGroupConnection_groupArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlansSectionSubTitleTextNodeGroupConnection_maxArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubTitleTextNodeGroupConnection_minArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubTitleTextNodeGroupConnection_sumArgs = {
		field: contentfulPlansSectionSubTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionSubTitleTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sub_title: InputMaybe<SortOrderEnum>;
		readonly sys: InputMaybe<contentfulPlansSectionSubTitleTextNodeSysSortInput>;
	};

	type contentfulPlansSectionSubTitleTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulPlansSectionSubTitleTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulPlansSectionSubTitleTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulPlansSectionSubTitleTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulPlansSectionTitleTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulPlansSectionTitleTextNodeSys>;
		readonly title: Maybe<Scalars['String']>;
	};

	type contentfulPlansSectionTitleTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlansSectionTitleTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulPlansSectionTitleTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlansSectionTitleTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlansSectionTitleTextNodeConnection_distinctArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionTitleTextNodeConnection_groupArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlansSectionTitleTextNodeConnection_maxArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionTitleTextNodeConnection_minArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionTitleTextNodeConnection_sumArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionTitleTextNodeEdge = {
		readonly next: Maybe<contentfulPlansSectionTitleTextNode>;
		readonly node: contentfulPlansSectionTitleTextNode;
		readonly previous: Maybe<contentfulPlansSectionTitleTextNode>;
	};

	type contentfulPlansSectionTitleTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulPlansSectionTitleTextNodeSysFieldSelector>;
		readonly title: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulPlansSectionTitleTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulPlansSectionTitleTextNodeSysFilterInput>;
		readonly title: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulPlansSectionTitleTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulPlansSectionTitleTextNodeFilterInput>;
	};

	type contentfulPlansSectionTitleTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPlansSectionTitleTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulPlansSectionTitleTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPlansSectionTitleTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPlansSectionTitleTextNodeGroupConnection_distinctArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionTitleTextNodeGroupConnection_groupArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPlansSectionTitleTextNodeGroupConnection_maxArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionTitleTextNodeGroupConnection_minArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionTitleTextNodeGroupConnection_sumArgs = {
		field: contentfulPlansSectionTitleTextNodeFieldSelector;
	};

	type contentfulPlansSectionTitleTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulPlansSectionTitleTextNodeSysSortInput>;
		readonly title: InputMaybe<SortOrderEnum>;
	};

	type contentfulPlansSectionTitleTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulPlansSectionTitleTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulPlansSectionTitleTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulPlansSectionTitleTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type contentfulPriceCardDescriptionTextNode = Node & {
		/** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
		readonly childMarkdownRemark: Maybe<MarkdownRemark>;
		readonly children: ReadonlyArray<Node>;
		/** Returns all children nodes filtered by type MarkdownRemark */
		readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
		readonly description: Maybe<Scalars['String']>;
		readonly id: Scalars['ID'];
		readonly internal: Internal;
		readonly parent: Maybe<Node>;
		readonly sys: Maybe<contentfulPriceCardDescriptionTextNodeSys>;
	};

	type contentfulPriceCardDescriptionTextNodeConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPriceCardDescriptionTextNodeEdge>;
		readonly group: ReadonlyArray<contentfulPriceCardDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPriceCardDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPriceCardDescriptionTextNodeConnection_distinctArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
	};

	type contentfulPriceCardDescriptionTextNodeConnection_groupArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPriceCardDescriptionTextNodeConnection_maxArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
	};

	type contentfulPriceCardDescriptionTextNodeConnection_minArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
	};

	type contentfulPriceCardDescriptionTextNodeConnection_sumArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
	};

	type contentfulPriceCardDescriptionTextNodeEdge = {
		readonly next: Maybe<contentfulPriceCardDescriptionTextNode>;
		readonly node: contentfulPriceCardDescriptionTextNode;
		readonly previous: Maybe<contentfulPriceCardDescriptionTextNode>;
	};

	type contentfulPriceCardDescriptionTextNodeFieldSelector = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly children: InputMaybe<NodeFieldSelector>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
		readonly description: InputMaybe<FieldSelectorEnum>;
		readonly id: InputMaybe<FieldSelectorEnum>;
		readonly internal: InputMaybe<InternalFieldSelector>;
		readonly parent: InputMaybe<NodeFieldSelector>;
		readonly sys: InputMaybe<contentfulPriceCardDescriptionTextNodeSysFieldSelector>;
	};

	type contentfulPriceCardDescriptionTextNodeFilterInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
		readonly children: InputMaybe<NodeFilterListInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
		readonly description: InputMaybe<StringQueryOperatorInput>;
		readonly id: InputMaybe<StringQueryOperatorInput>;
		readonly internal: InputMaybe<InternalFilterInput>;
		readonly parent: InputMaybe<NodeFilterInput>;
		readonly sys: InputMaybe<contentfulPriceCardDescriptionTextNodeSysFilterInput>;
	};

	type contentfulPriceCardDescriptionTextNodeFilterListInput = {
		readonly elemMatch: InputMaybe<contentfulPriceCardDescriptionTextNodeFilterInput>;
	};

	type contentfulPriceCardDescriptionTextNodeGroupConnection = {
		readonly distinct: ReadonlyArray<Scalars['String']>;
		readonly edges: ReadonlyArray<contentfulPriceCardDescriptionTextNodeEdge>;
		readonly field: Scalars['String'];
		readonly fieldValue: Maybe<Scalars['String']>;
		readonly group: ReadonlyArray<contentfulPriceCardDescriptionTextNodeGroupConnection>;
		readonly max: Maybe<Scalars['Float']>;
		readonly min: Maybe<Scalars['Float']>;
		readonly nodes: ReadonlyArray<contentfulPriceCardDescriptionTextNode>;
		readonly pageInfo: PageInfo;
		readonly sum: Maybe<Scalars['Float']>;
		readonly totalCount: Scalars['Int'];
	};

	type contentfulPriceCardDescriptionTextNodeGroupConnection_distinctArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
	};

	type contentfulPriceCardDescriptionTextNodeGroupConnection_groupArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
		limit: InputMaybe<Scalars['Int']>;
		skip: InputMaybe<Scalars['Int']>;
	};

	type contentfulPriceCardDescriptionTextNodeGroupConnection_maxArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
	};

	type contentfulPriceCardDescriptionTextNodeGroupConnection_minArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
	};

	type contentfulPriceCardDescriptionTextNodeGroupConnection_sumArgs = {
		field: contentfulPriceCardDescriptionTextNodeFieldSelector;
	};

	type contentfulPriceCardDescriptionTextNodeSortInput = {
		readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly children: InputMaybe<NodeSortInput>;
		readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
		readonly description: InputMaybe<SortOrderEnum>;
		readonly id: InputMaybe<SortOrderEnum>;
		readonly internal: InputMaybe<InternalSortInput>;
		readonly parent: InputMaybe<NodeSortInput>;
		readonly sys: InputMaybe<contentfulPriceCardDescriptionTextNodeSysSortInput>;
	};

	type contentfulPriceCardDescriptionTextNodeSys = {
		readonly type: Maybe<Scalars['String']>;
	};

	type contentfulPriceCardDescriptionTextNodeSysFieldSelector = {
		readonly type: InputMaybe<FieldSelectorEnum>;
	};

	type contentfulPriceCardDescriptionTextNodeSysFilterInput = {
		readonly type: InputMaybe<StringQueryOperatorInput>;
	};

	type contentfulPriceCardDescriptionTextNodeSysSortInput = {
		readonly type: InputMaybe<SortOrderEnum>;
	};

	type BlogPostBySlugQueryVariables = Exact<{
		slug: Scalars['String'];
	}>;

	type BlogPostBySlugQuery = {
		readonly page: {
			readonly seo_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly blog_date: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly tag: string | null;
							readonly blog_slug: string | null;
							readonly blog_date: string | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
							} | null;
						} | null> | null;
				  }
				| null
			> | null;
		} | null;
	};

	type BlogPostBySlugBannerSectionFragment = {
		readonly slice_name: string | null;
		readonly blog_date: string | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type BlogPostBySlugCardSectionFragment = {
		readonly slice_name: string | null;
		readonly title: string | null;
		readonly cards: ReadonlyArray<{
			readonly title: string | null;
			readonly tag: string | null;
			readonly blog_slug: string | null;
			readonly blog_date: string | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
			readonly card_image: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null;
		} | null> | null;
	};

	type BlogPostBySlugDetailsSectionFragment = {
		readonly slice_name: string | null;
		readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
	};

	type FeatureBannerSectionFragment = {
		readonly slice_name: string | null;
		readonly feature_colour: string | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
		readonly image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type FeatureBySlugQueryVariables = Exact<{
		slug: Scalars['String'];
	}>;

	type FeatureBySlugQuery = {
		readonly page: {
			readonly seo_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly feature_colour: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
						readonly image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly tag: string | null;
							readonly blog_date: string | null;
							readonly blog_slug: string | null;
							readonly feature_slug: string | null;
							readonly image_className: string | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
								readonly file: { readonly url: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
				  }
				| null
			> | null;
		} | null;
	};

	type FeatureCardSectionFragment = {
		readonly slice_name: string | null;
		readonly title: string | null;
		readonly cards: ReadonlyArray<{
			readonly title: string | null;
			readonly tag: string | null;
			readonly blog_date: string | null;
			readonly blog_slug: string | null;
			readonly feature_slug: string | null;
			readonly image_className: string | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
			readonly card_image: {
				readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
				readonly file: { readonly url: string | null } | null;
			} | null;
		} | null> | null;
	};

	type FeatureFeaturesDetailsSectionFragment = {
		readonly slice_name: string | null;
		readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
	};

	type FeaturePageBannerSectionFragment = {
		readonly slice_name: string | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type FeaturePageCardSectionFragment = {
		readonly slice_name: string | null;
		readonly title: string | null;
		readonly rich_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly cards: ReadonlyArray<{
			readonly title: string | null;
			readonly image_className: string | null;
			readonly tag: string | null;
			readonly blog_date: string | null;
			readonly blog_slug: string | null;
			readonly feature_slug: string | null;
			readonly card_image: {
				readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
				readonly file: { readonly url: string | null } | null;
			} | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		} | null> | null;
	};

	type FeaturePageQueryQueryVariables = Exact<{ [key: string]: never }>;

	type FeaturePageQueryQuery = {
		readonly page: {
			readonly page_name: string | null;
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly rich_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly image_className: string | null;
							readonly tag: string | null;
							readonly blog_date: string | null;
							readonly blog_slug: string | null;
							readonly feature_slug: string | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
								readonly file: { readonly url: string | null } | null;
							} | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type GatsbyImageSharpFixedFragment = {
		readonly base64: string | null;
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
	};

	type GatsbyImageSharpFixed_noBase64Fragment = {
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
	};

	type GatsbyImageSharpFixed_tracedSVGFragment = {
		readonly tracedSVG: string | null;
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
	};

	type GatsbyImageSharpFixed_withWebpFragment = {
		readonly base64: string | null;
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
	};

	type GatsbyImageSharpFixed_withWebp_noBase64Fragment = {
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
	};

	type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = {
		readonly tracedSVG: string | null;
		readonly width: number;
		readonly height: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
	};

	type GatsbyImageSharpFluidFragment = {
		readonly base64: string | null;
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_noBase64Fragment = {
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_tracedSVGFragment = {
		readonly tracedSVG: string | null;
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_withWebpFragment = {
		readonly base64: string | null;
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_withWebp_noBase64Fragment = {
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = {
		readonly tracedSVG: string | null;
		readonly aspectRatio: number;
		readonly src: string;
		readonly srcSet: string;
		readonly srcWebp: string | null;
		readonly srcSetWebp: string | null;
		readonly sizes: string;
	};

	type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number; readonly maxWidth: number };

	type GDPRPageQueryVariables = Exact<{ [key: string]: never }>;

	type GDPRPageQuery = {
		readonly page: {
			readonly page_name: string | null;
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly rich_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly image_className: string | null;
							readonly tag: string | null;
							readonly blog_date: string | null;
							readonly blog_slug: string | null;
							readonly feature_slug: string | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
								readonly file: { readonly url: string | null } | null;
							} | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type HomeBannerSectionFragment = {
		readonly slice_name: string | null;
		readonly banner_page_name: string | null;
		readonly button_text: string | null;
		readonly button_link: string | null;
		readonly section1_title: { readonly raw: string | null } | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: {
			readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
		} | null;
	};

	type HomeBasicInfoSectionFragment = {
		readonly slice_name: string | null;
		readonly basic_info_section_name: string | null;
		readonly sub_title: string | null;
		readonly button_text: string | null;
		readonly button_link: string | null;
		readonly section2_title: string | null;
	};

	type HomeCardSectionFragment = {
		readonly slice_name: string | null;
		readonly card_section_name: string | null;
		readonly button_text: string | null;
		readonly button_link: string | null;
		readonly section3_title: string | null;
		readonly section3_description: string | null;
		readonly cards: ReadonlyArray<{
			readonly card_name: string | null;
			readonly title: string | null;
			readonly image_className: string | null;
			readonly description: string | null;
			readonly button_text: string | null;
			readonly tag: string | null;
			readonly blog_date: string | null;
			readonly feature_slug: string | null;
			readonly blog_slug: string | null;
			readonly card_image: {
				readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
				readonly file: { readonly url: string | null } | null;
			} | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		} | null> | null;
	};

	type HomeDividedSectionFragment = {
		readonly slice_name: string | null;
		readonly divided_section_name: string | null;
		readonly title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly first_image: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null;
		readonly second_image: { readonly file: { readonly url: string | null } | null } | null;
		readonly third_image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type HomeQueryQueryVariables = Exact<{ [key: string]: never }>;

	type HomeQueryQuery = {
		readonly page: {
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly banner_page_name: string | null;
						readonly button_text: string | null;
						readonly button_link: string | null;
						readonly section1_title: { readonly raw: string | null } | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: {
							readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
						} | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly basic_info_section_name: string | null;
						readonly sub_title: string | null;
						readonly button_text: string | null;
						readonly button_link: string | null;
						readonly section2_title: string | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly card_section_name: string | null;
						readonly button_text: string | null;
						readonly button_link: string | null;
						readonly section3_title: string | null;
						readonly section3_description: string | null;
						readonly cards: ReadonlyArray<{
							readonly card_name: string | null;
							readonly title: string | null;
							readonly image_className: string | null;
							readonly description: string | null;
							readonly button_text: string | null;
							readonly tag: string | null;
							readonly blog_date: string | null;
							readonly feature_slug: string | null;
							readonly blog_slug: string | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
								readonly file: { readonly url: string | null } | null;
							} | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly divided_section_name: string | null;
						readonly title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly first_image: {
							readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
						} | null;
						readonly second_image: { readonly file: { readonly url: string | null } | null } | null;
						readonly third_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type LegalBannerSectionFragment = {
		readonly slice_name: string | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type LegalCardSectionFragment = {
		readonly slice_name: string | null;
		readonly title: string | null;
		readonly rich_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly cards: ReadonlyArray<{
			readonly title: string | null;
			readonly image_className: string | null;
			readonly tag: string | null;
			readonly blog_date: string | null;
			readonly blog_slug: string | null;
			readonly feature_slug: string | null;
			readonly card_image: {
				readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
				readonly file: { readonly url: string | null } | null;
			} | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		} | null> | null;
	};

	type LegalFooterDetailsPageSectionFragment = {
		readonly slice_name: string | null;
		readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
	};

	type Page404QueryVariables = Exact<{ [key: string]: never }>;

	type Page404Query = {
		readonly page: {
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly tag: string | null;
							readonly blog_slug: string | null;
							readonly blog_date: string | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
							} | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type Page404BannerFragment = {
		readonly slice_name: string | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type Page404CardFragment = {
		readonly slice_name: string | null;
		readonly title: string | null;
		readonly cards: ReadonlyArray<{
			readonly title: string | null;
			readonly tag: string | null;
			readonly blog_slug: string | null;
			readonly blog_date: string | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
			readonly card_image: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null;
		} | null> | null;
	};

	type Page404FooterDetailsFragment = {
		readonly slice_name: string | null;
		readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
	};

	type PricingPageQueryVariables = Exact<{ [key: string]: never }>;

	type PricingPageQuery = {
		readonly page: {
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly banner_description: {
							readonly childMarkdownRemark: { readonly html: string | null } | null;
						} | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly card_section_name: string | null;
						readonly faq_title: string | null;
						readonly faq_description: string | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly plan_title: string | null;
						readonly plan_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly feature_sets: ReadonlyArray<{
							readonly title: string | null;
							readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
							readonly features: ReadonlyArray<{
								readonly feature_text: string | null;
								readonly essentials_text: string | null;
								readonly essentials_check: boolean | null;
								readonly growth_text: string | null;
								readonly growth_check: boolean | null;
								readonly lighthouse_text: string | null;
								readonly lighthouse_check: boolean | null;
							} | null> | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly discount_percentage_yearly: number | null;
						readonly active_profiles: number | null;
						readonly calendlyUrl: string | null;
						readonly editions_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly sub_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly sub_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly cards: ReadonlyArray<{
							readonly card_name: string | null;
							readonly class_name: string | null;
							readonly title: string | null;
							readonly price: number | null;
							readonly step: number | null;
							readonly stepPrice: number | null;
							readonly button_text: string | null;
							readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
							readonly feature_list: ReadonlyArray<{
								readonly feature_text: string | null;
								readonly bold: boolean | null;
								readonly addOnText: string | null;
								readonly newText: string | null;
							} | null> | null;
						} | null> | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type PricingPageBannerFragment = {
		readonly slice_name: string | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly banner_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type PricingPageCardFragment = {
		readonly slice_name: string | null;
		readonly card_section_name: string | null;
		readonly faq_title: string | null;
		readonly faq_description: string | null;
		readonly cards: ReadonlyArray<{
			readonly title: string | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		} | null> | null;
	};

	type PricingPagePlanFeatureFragment = {
		readonly slice_name: string | null;
		readonly plan_title: string | null;
		readonly plan_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly feature_sets: ReadonlyArray<{
			readonly title: string | null;
			readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
			readonly features: ReadonlyArray<{
				readonly feature_text: string | null;
				readonly essentials_text: string | null;
				readonly essentials_check: boolean | null;
				readonly growth_text: string | null;
				readonly growth_check: boolean | null;
				readonly lighthouse_text: string | null;
				readonly lighthouse_check: boolean | null;
			} | null> | null;
		} | null> | null;
	};

	type PricingPagePlansFragment = {
		readonly slice_name: string | null;
		readonly discount_percentage_yearly: number | null;
		readonly active_profiles: number | null;
		readonly calendlyUrl: string | null;
		readonly editions_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly sub_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly sub_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly cards: ReadonlyArray<{
			readonly card_name: string | null;
			readonly class_name: string | null;
			readonly title: string | null;
			readonly price: number | null;
			readonly step: number | null;
			readonly stepPrice: number | null;
			readonly button_text: string | null;
			readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
			readonly feature_list: ReadonlyArray<{
				readonly feature_text: string | null;
				readonly bold: boolean | null;
				readonly addOnText: string | null;
				readonly newText: string | null;
			} | null> | null;
		} | null> | null;
	};

	type PrivacyPageQueryVariables = Exact<{ [key: string]: never }>;

	type PrivacyPageQuery = {
		readonly page: {
			readonly page_name: string | null;
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly rich_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly image_className: string | null;
							readonly tag: string | null;
							readonly blog_date: string | null;
							readonly blog_slug: string | null;
							readonly feature_slug: string | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
								readonly file: { readonly url: string | null } | null;
							} | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type SignUpBannerSectionFragment = {
		readonly slice_name: string | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly bannerDescription: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type SignUpCardSectionFragment = {
		readonly slice_name: string | null;
		readonly title: string | null;
		readonly description: string | null;
		readonly cards: ReadonlyArray<{
			readonly card_name: string | null;
			readonly title: string | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		} | null> | null;
	};

	type SignUpPageQueryVariables = Exact<{ [key: string]: never }>;

	type SignUpPageQuery = {
		readonly page: {
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly bannerDescription: {
							readonly childMarkdownRemark: { readonly html: string | null } | null;
						} | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly description: string | null;
						readonly cards: ReadonlyArray<{
							readonly card_name: string | null;
							readonly title: string | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type SiteMetadataQueryVariables = Exact<{ [key: string]: never }>;

	type SiteMetadataQuery = {
		readonly site: {
			readonly siteMetadata: {
				readonly title: string | null;
				readonly description: string | null;
				readonly author: string | null;
			} | null;
		} | null;
	};

	type SlaPageQueryVariables = Exact<{ [key: string]: never }>;

	type SlaPageQuery = {
		readonly page: {
			readonly page_name: string | null;
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly rich_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly image_className: string | null;
							readonly tag: string | null;
							readonly blog_date: string | null;
							readonly blog_slug: string | null;
							readonly feature_slug: string | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
								readonly file: { readonly url: string | null } | null;
							} | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type TermsPageQueryVariables = Exact<{ [key: string]: never }>;

	type TermsPageQuery = {
		readonly page: {
			readonly page_name: string | null;
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly rich_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly image_className: string | null;
							readonly tag: string | null;
							readonly blog_date: string | null;
							readonly blog_slug: string | null;
							readonly feature_slug: string | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
								readonly file: { readonly url: string | null } | null;
							} | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type WaveBannerSectionFragment = {
		readonly slice_name: string | null;
		readonly button_text: string | null;
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
		readonly image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type WaveCardSectionFragment = {
		readonly slice_name: string | null;
		readonly title: string | null;
		readonly cards: ReadonlyArray<{
			readonly title: string | null;
			readonly card_name: string | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
			readonly card_image: {
				readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
				readonly file: { readonly url: string | null } | null;
			} | null;
		} | null> | null;
	};

	type WavePageQueryVariables = Exact<{ [key: string]: never }>;

	type WavePageQuery = {
		readonly page: {
			readonly page_title: string | null;
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly button_text: string | null;
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
						readonly image: { readonly file: { readonly url: string | null } | null } | null;
				  }
				| {
						readonly slice_name: string | null;
						readonly title: string | null;
						readonly cards: ReadonlyArray<{
							readonly title: string | null;
							readonly card_name: string | null;
							readonly long_description: {
								readonly childMarkdownRemark: { readonly html: string | null } | null;
							} | null;
							readonly card_image: {
								readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
								readonly file: { readonly url: string | null } | null;
							} | null;
						} | null> | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type AllBlogsQueryVariables = Exact<{ [key: string]: never }>;

	type AllBlogsQuery = {
		readonly results: {
			readonly edges: ReadonlyArray<{
				readonly node: {
					readonly slice_name: string | null;
					readonly all_blog_section: string | null;
					readonly all_blogs_banner_section: {
						readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
						readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
					} | null;
					readonly single_blogs: ReadonlyArray<{
						readonly id: string;
						readonly title: string | null;
						readonly blog_date: string | null;
						readonly blog_slug: string | null;
						readonly card_image: {
							readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
							readonly file: { readonly url: string | null } | null;
						} | null;
						readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
					} | null> | null;
				};
			}>;
		};
	};

	type AllBlogsContentFragment = {
		readonly slice_name: string | null;
		readonly all_blog_section: string | null;
		readonly all_blogs_banner_section: {
			readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
			readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
			readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
		} | null;
		readonly single_blogs: ReadonlyArray<{
			readonly id: string;
			readonly title: string | null;
			readonly blog_date: string | null;
			readonly blog_slug: string | null;
			readonly card_image: {
				readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
				readonly file: { readonly url: string | null } | null;
			} | null;
			readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		} | null> | null;
	};

	type AllBlogsBannerSectionFragment = {
		readonly rich_title: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
		readonly background_image: { readonly file: { readonly url: string | null } | null } | null;
	};

	type AllBlogsCardFragment = {
		readonly id: string;
		readonly title: string | null;
		readonly blog_date: string | null;
		readonly blog_slug: string | null;
		readonly card_image: {
			readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null;
			readonly file: { readonly url: string | null } | null;
		} | null;
		readonly long_description: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null;
	};

	type AllFeaturesQueryVariables = Exact<{ [key: string]: never }>;

	type AllFeaturesQuery = {
		readonly page: {
			readonly sections: ReadonlyArray<
				| {
						readonly slice_name: string | null;
						readonly cards: ReadonlyArray<{ readonly feature_slug: string | null } | null> | null;
				  }
				| {}
				| null
			> | null;
		} | null;
	};

	type AllFeaturesCardSectionFragment = {
		readonly slice_name: string | null;
		readonly cards: ReadonlyArray<{ readonly feature_slug: string | null } | null> | null;
	};

	type AllFeaturesCardFragment = { readonly feature_slug: string | null };
}
